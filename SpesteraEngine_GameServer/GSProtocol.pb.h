// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GSProtocol.proto
// Protobuf C++ Version: 4.25.1

#ifndef GOOGLE_PROTOBUF_INCLUDED_GSProtocol_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_GSProtocol_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4025001 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_GSProtocol_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_GSProtocol_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_GSProtocol_2eproto;
class AssignId;
struct AssignIdDefaultTypeInternal;
extern AssignIdDefaultTypeInternal _AssignId_default_instance_;
class ClientLogin;
struct ClientLoginDefaultTypeInternal;
extern ClientLoginDefaultTypeInternal _ClientLogin_default_instance_;
class ClientLogout;
struct ClientLogoutDefaultTypeInternal;
extern ClientLogoutDefaultTypeInternal _ClientLogout_default_instance_;
class GSWrapper;
struct GSWrapperDefaultTypeInternal;
extern GSWrapperDefaultTypeInternal _GSWrapper_default_instance_;
class RequestCharacter;
struct RequestCharacterDefaultTypeInternal;
extern RequestCharacterDefaultTypeInternal _RequestCharacter_default_instance_;
class Response;
struct ResponseDefaultTypeInternal;
extern ResponseDefaultTypeInternal _Response_default_instance_;
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

enum GSWrapper_MessageType : int {
  GSWrapper_MessageType_WORLDDATA = 0,
  GSWrapper_MessageType_REQUESTCHARACTER = 1,
  GSWrapper_MessageType_CLIENTLOGOUT = 2,
  GSWrapper_MessageType_ASSIGNID = 99,
  GSWrapper_MessageType_RESPONSE = 100,
  GSWrapper_MessageType_GSWrapper_MessageType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  GSWrapper_MessageType_GSWrapper_MessageType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool GSWrapper_MessageType_IsValid(int value);
extern const uint32_t GSWrapper_MessageType_internal_data_[];
constexpr GSWrapper_MessageType GSWrapper_MessageType_MessageType_MIN = static_cast<GSWrapper_MessageType>(0);
constexpr GSWrapper_MessageType GSWrapper_MessageType_MessageType_MAX = static_cast<GSWrapper_MessageType>(100);
constexpr int GSWrapper_MessageType_MessageType_ARRAYSIZE = 100 + 1;
const ::google::protobuf::EnumDescriptor*
GSWrapper_MessageType_descriptor();
template <typename T>
const std::string& GSWrapper_MessageType_Name(T value) {
  static_assert(std::is_same<T, GSWrapper_MessageType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to MessageType_Name().");
  return ::google::protobuf::internal::NameOfEnum(GSWrapper_MessageType_descriptor(), value);
}
inline bool GSWrapper_MessageType_Parse(absl::string_view name, GSWrapper_MessageType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GSWrapper_MessageType>(
      GSWrapper_MessageType_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class Response final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Response) */ {
 public:
  inline Response() : Response(nullptr) {}
  ~Response() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Response(::google::protobuf::internal::ConstantInitialized);

  inline Response(const Response& from)
      : Response(nullptr, from) {}
  Response(Response&& from) noexcept
    : Response() {
    *this = ::std::move(from);
  }

  inline Response& operator=(const Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline Response& operator=(Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const Response* internal_default_instance() {
    return reinterpret_cast<const Response*>(
               &_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Response& a, Response& b) {
    a.Swap(&b);
  }
  inline void Swap(Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Response* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Response* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Response>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Response& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Response& from) {
    Response::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Response* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Response";
  }
  protected:
  explicit Response(::google::protobuf::Arena* arena);
  Response(::google::protobuf::Arena* arena, const Response& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // string data = 1;
  void clear_data() ;
  const std::string& data() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_data(Arg_&& arg, Args_... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* value);

  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(
      const std::string& value);
  std::string* _internal_mutable_data();

  public:
  // @@protoc_insertion_point(class_scope:Response)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      21, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr data_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_GSProtocol_2eproto;
};// -------------------------------------------------------------------

class RequestCharacter final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:RequestCharacter) */ {
 public:
  inline RequestCharacter() : RequestCharacter(nullptr) {}
  ~RequestCharacter() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR RequestCharacter(::google::protobuf::internal::ConstantInitialized);

  inline RequestCharacter(const RequestCharacter& from)
      : RequestCharacter(nullptr, from) {}
  RequestCharacter(RequestCharacter&& from) noexcept
    : RequestCharacter() {
    *this = ::std::move(from);
  }

  inline RequestCharacter& operator=(const RequestCharacter& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestCharacter& operator=(RequestCharacter&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RequestCharacter& default_instance() {
    return *internal_default_instance();
  }
  static inline const RequestCharacter* internal_default_instance() {
    return reinterpret_cast<const RequestCharacter*>(
               &_RequestCharacter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RequestCharacter& a, RequestCharacter& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestCharacter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestCharacter* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RequestCharacter* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RequestCharacter>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const RequestCharacter& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const RequestCharacter& from) {
    RequestCharacter::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(RequestCharacter* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "RequestCharacter";
  }
  protected:
  explicit RequestCharacter(::google::protobuf::Arena* arena);
  RequestCharacter(::google::protobuf::Arena* arena, const RequestCharacter& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
  };
  // string player_id = 1;
  void clear_player_id() ;
  const std::string& player_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_player_id(Arg_&& arg, Args_... args);
  std::string* mutable_player_id();
  PROTOBUF_NODISCARD std::string* release_player_id();
  void set_allocated_player_id(std::string* value);

  private:
  const std::string& _internal_player_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_player_id(
      const std::string& value);
  std::string* _internal_mutable_player_id();

  public:
  // @@protoc_insertion_point(class_scope:RequestCharacter)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      34, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr player_id_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_GSProtocol_2eproto;
};// -------------------------------------------------------------------

class GSWrapper final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GSWrapper) */ {
 public:
  inline GSWrapper() : GSWrapper(nullptr) {}
  ~GSWrapper() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GSWrapper(::google::protobuf::internal::ConstantInitialized);

  inline GSWrapper(const GSWrapper& from)
      : GSWrapper(nullptr, from) {}
  GSWrapper(GSWrapper&& from) noexcept
    : GSWrapper() {
    *this = ::std::move(from);
  }

  inline GSWrapper& operator=(const GSWrapper& from) {
    CopyFrom(from);
    return *this;
  }
  inline GSWrapper& operator=(GSWrapper&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GSWrapper& default_instance() {
    return *internal_default_instance();
  }
  static inline const GSWrapper* internal_default_instance() {
    return reinterpret_cast<const GSWrapper*>(
               &_GSWrapper_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GSWrapper& a, GSWrapper& b) {
    a.Swap(&b);
  }
  inline void Swap(GSWrapper* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GSWrapper* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GSWrapper* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GSWrapper>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GSWrapper& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const GSWrapper& from) {
    GSWrapper::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(GSWrapper* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "GSWrapper";
  }
  protected:
  explicit GSWrapper(::google::protobuf::Arena* arena);
  GSWrapper(::google::protobuf::Arena* arena, const GSWrapper& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using MessageType = GSWrapper_MessageType;
  static constexpr MessageType WORLDDATA = GSWrapper_MessageType_WORLDDATA;
  static constexpr MessageType REQUESTCHARACTER = GSWrapper_MessageType_REQUESTCHARACTER;
  static constexpr MessageType CLIENTLOGOUT = GSWrapper_MessageType_CLIENTLOGOUT;
  static constexpr MessageType ASSIGNID = GSWrapper_MessageType_ASSIGNID;
  static constexpr MessageType RESPONSE = GSWrapper_MessageType_RESPONSE;
  static inline bool MessageType_IsValid(int value) {
    return GSWrapper_MessageType_IsValid(value);
  }
  static constexpr MessageType MessageType_MIN = GSWrapper_MessageType_MessageType_MIN;
  static constexpr MessageType MessageType_MAX = GSWrapper_MessageType_MessageType_MAX;
  static constexpr int MessageType_ARRAYSIZE = GSWrapper_MessageType_MessageType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* MessageType_descriptor() {
    return GSWrapper_MessageType_descriptor();
  }
  template <typename T>
  static inline const std::string& MessageType_Name(T value) {
    return GSWrapper_MessageType_Name(value);
  }
  static inline bool MessageType_Parse(absl::string_view name, MessageType* value) {
    return GSWrapper_MessageType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kPayloadFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // bytes payload = 2;
  void clear_payload() ;
  const std::string& payload() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_payload(Arg_&& arg, Args_... args);
  std::string* mutable_payload();
  PROTOBUF_NODISCARD std::string* release_payload();
  void set_allocated_payload(std::string* value);

  private:
  const std::string& _internal_payload() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_payload(
      const std::string& value);
  std::string* _internal_mutable_payload();

  public:
  // .GSWrapper.MessageType type = 1;
  void clear_type() ;
  ::GSWrapper_MessageType type() const;
  void set_type(::GSWrapper_MessageType value);

  private:
  ::GSWrapper_MessageType _internal_type() const;
  void _internal_set_type(::GSWrapper_MessageType value);

  public:
  // @@protoc_insertion_point(class_scope:GSWrapper)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr payload_;
    int type_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_GSProtocol_2eproto;
};// -------------------------------------------------------------------

class ClientLogout final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ClientLogout) */ {
 public:
  inline ClientLogout() : ClientLogout(nullptr) {}
  ~ClientLogout() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ClientLogout(::google::protobuf::internal::ConstantInitialized);

  inline ClientLogout(const ClientLogout& from)
      : ClientLogout(nullptr, from) {}
  ClientLogout(ClientLogout&& from) noexcept
    : ClientLogout() {
    *this = ::std::move(from);
  }

  inline ClientLogout& operator=(const ClientLogout& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientLogout& operator=(ClientLogout&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ClientLogout& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClientLogout* internal_default_instance() {
    return reinterpret_cast<const ClientLogout*>(
               &_ClientLogout_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ClientLogout& a, ClientLogout& b) {
    a.Swap(&b);
  }
  inline void Swap(ClientLogout* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientLogout* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClientLogout* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClientLogout>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ClientLogout& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ClientLogout& from) {
    ClientLogout::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ClientLogout* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ClientLogout";
  }
  protected:
  explicit ClientLogout(::google::protobuf::Arena* arena);
  ClientLogout(::google::protobuf::Arena* arena, const ClientLogout& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
  };
  // uint32 player_id = 1;
  void clear_player_id() ;
  ::uint32_t player_id() const;
  void set_player_id(::uint32_t value);

  private:
  ::uint32_t _internal_player_id() const;
  void _internal_set_player_id(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:ClientLogout)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::uint32_t player_id_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_GSProtocol_2eproto;
};// -------------------------------------------------------------------

class ClientLogin final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ClientLogin) */ {
 public:
  inline ClientLogin() : ClientLogin(nullptr) {}
  ~ClientLogin() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ClientLogin(::google::protobuf::internal::ConstantInitialized);

  inline ClientLogin(const ClientLogin& from)
      : ClientLogin(nullptr, from) {}
  ClientLogin(ClientLogin&& from) noexcept
    : ClientLogin() {
    *this = ::std::move(from);
  }

  inline ClientLogin& operator=(const ClientLogin& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientLogin& operator=(ClientLogin&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ClientLogin& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClientLogin* internal_default_instance() {
    return reinterpret_cast<const ClientLogin*>(
               &_ClientLogin_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ClientLogin& a, ClientLogin& b) {
    a.Swap(&b);
  }
  inline void Swap(ClientLogin* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientLogin* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClientLogin* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClientLogin>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ClientLogin& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ClientLogin& from) {
    ClientLogin::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ClientLogin* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ClientLogin";
  }
  protected:
  explicit ClientLogin(::google::protobuf::Arena* arena);
  ClientLogin(::google::protobuf::Arena* arena, const ClientLogin& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
  };
  // uint32 player_id = 1;
  void clear_player_id() ;
  ::uint32_t player_id() const;
  void set_player_id(::uint32_t value);

  private:
  ::uint32_t _internal_player_id() const;
  void _internal_set_player_id(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:ClientLogin)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::uint32_t player_id_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_GSProtocol_2eproto;
};// -------------------------------------------------------------------

class AssignId final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AssignId) */ {
 public:
  inline AssignId() : AssignId(nullptr) {}
  ~AssignId() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR AssignId(::google::protobuf::internal::ConstantInitialized);

  inline AssignId(const AssignId& from)
      : AssignId(nullptr, from) {}
  AssignId(AssignId&& from) noexcept
    : AssignId() {
    *this = ::std::move(from);
  }

  inline AssignId& operator=(const AssignId& from) {
    CopyFrom(from);
    return *this;
  }
  inline AssignId& operator=(AssignId&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AssignId& default_instance() {
    return *internal_default_instance();
  }
  static inline const AssignId* internal_default_instance() {
    return reinterpret_cast<const AssignId*>(
               &_AssignId_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(AssignId& a, AssignId& b) {
    a.Swap(&b);
  }
  inline void Swap(AssignId* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AssignId* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AssignId* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AssignId>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AssignId& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const AssignId& from) {
    AssignId::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(AssignId* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "AssignId";
  }
  protected:
  explicit AssignId(::google::protobuf::Arena* arena);
  AssignId(::google::protobuf::Arena* arena, const AssignId& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStringFieldNumber = 1,
  };
  // uint32 string = 1;
  void clear_string() ;
  ::uint32_t string() const;
  void set_string(::uint32_t value);

  private:
  ::uint32_t _internal_string() const;
  void _internal_set_string(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:AssignId)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::uint32_t string_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_GSProtocol_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// GSWrapper

// .GSWrapper.MessageType type = 1;
inline void GSWrapper::clear_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.type_ = 0;
}
inline ::GSWrapper_MessageType GSWrapper::type() const {
  // @@protoc_insertion_point(field_get:GSWrapper.type)
  return _internal_type();
}
inline void GSWrapper::set_type(::GSWrapper_MessageType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:GSWrapper.type)
}
inline ::GSWrapper_MessageType GSWrapper::_internal_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::GSWrapper_MessageType>(_impl_.type_);
}
inline void GSWrapper::_internal_set_type(::GSWrapper_MessageType value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.type_ = value;
}

// bytes payload = 2;
inline void GSWrapper::clear_payload() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.payload_.ClearToEmpty();
}
inline const std::string& GSWrapper::payload() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:GSWrapper.payload)
  return _internal_payload();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GSWrapper::set_payload(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.payload_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:GSWrapper.payload)
}
inline std::string* GSWrapper::mutable_payload() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_payload();
  // @@protoc_insertion_point(field_mutable:GSWrapper.payload)
  return _s;
}
inline const std::string& GSWrapper::_internal_payload() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.payload_.Get();
}
inline void GSWrapper::_internal_set_payload(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.payload_.Set(value, GetArena());
}
inline std::string* GSWrapper::_internal_mutable_payload() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.payload_.Mutable( GetArena());
}
inline std::string* GSWrapper::release_payload() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:GSWrapper.payload)
  return _impl_.payload_.Release();
}
inline void GSWrapper::set_allocated_payload(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.payload_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.payload_.IsDefault()) {
          _impl_.payload_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:GSWrapper.payload)
}

// -------------------------------------------------------------------

// RequestCharacter

// string player_id = 1;
inline void RequestCharacter::clear_player_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.player_id_.ClearToEmpty();
}
inline const std::string& RequestCharacter::player_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:RequestCharacter.player_id)
  return _internal_player_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RequestCharacter::set_player_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.player_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:RequestCharacter.player_id)
}
inline std::string* RequestCharacter::mutable_player_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_player_id();
  // @@protoc_insertion_point(field_mutable:RequestCharacter.player_id)
  return _s;
}
inline const std::string& RequestCharacter::_internal_player_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.player_id_.Get();
}
inline void RequestCharacter::_internal_set_player_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.player_id_.Set(value, GetArena());
}
inline std::string* RequestCharacter::_internal_mutable_player_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.player_id_.Mutable( GetArena());
}
inline std::string* RequestCharacter::release_player_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:RequestCharacter.player_id)
  return _impl_.player_id_.Release();
}
inline void RequestCharacter::set_allocated_player_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.player_id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.player_id_.IsDefault()) {
          _impl_.player_id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:RequestCharacter.player_id)
}

// -------------------------------------------------------------------

// Response

// string data = 1;
inline void Response::clear_data() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.data_.ClearToEmpty();
}
inline const std::string& Response::data() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:Response.data)
  return _internal_data();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Response::set_data(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.data_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:Response.data)
}
inline std::string* Response::mutable_data() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:Response.data)
  return _s;
}
inline const std::string& Response::_internal_data() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.data_.Get();
}
inline void Response::_internal_set_data(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.data_.Set(value, GetArena());
}
inline std::string* Response::_internal_mutable_data() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.data_.Mutable( GetArena());
}
inline std::string* Response::release_data() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:Response.data)
  return _impl_.data_.Release();
}
inline void Response::set_allocated_data(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.data_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.data_.IsDefault()) {
          _impl_.data_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Response.data)
}

// -------------------------------------------------------------------

// ClientLogin

// uint32 player_id = 1;
inline void ClientLogin::clear_player_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.player_id_ = 0u;
}
inline ::uint32_t ClientLogin::player_id() const {
  // @@protoc_insertion_point(field_get:ClientLogin.player_id)
  return _internal_player_id();
}
inline void ClientLogin::set_player_id(::uint32_t value) {
  _internal_set_player_id(value);
  // @@protoc_insertion_point(field_set:ClientLogin.player_id)
}
inline ::uint32_t ClientLogin::_internal_player_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.player_id_;
}
inline void ClientLogin::_internal_set_player_id(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.player_id_ = value;
}

// -------------------------------------------------------------------

// ClientLogout

// uint32 player_id = 1;
inline void ClientLogout::clear_player_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.player_id_ = 0u;
}
inline ::uint32_t ClientLogout::player_id() const {
  // @@protoc_insertion_point(field_get:ClientLogout.player_id)
  return _internal_player_id();
}
inline void ClientLogout::set_player_id(::uint32_t value) {
  _internal_set_player_id(value);
  // @@protoc_insertion_point(field_set:ClientLogout.player_id)
}
inline ::uint32_t ClientLogout::_internal_player_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.player_id_;
}
inline void ClientLogout::_internal_set_player_id(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.player_id_ = value;
}

// -------------------------------------------------------------------

// AssignId

// uint32 string = 1;
inline void AssignId::clear_string() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.string_ = 0u;
}
inline ::uint32_t AssignId::string() const {
  // @@protoc_insertion_point(field_get:AssignId.string)
  return _internal_string();
}
inline void AssignId::set_string(::uint32_t value) {
  _internal_set_string(value);
  // @@protoc_insertion_point(field_set:AssignId.string)
}
inline ::uint32_t AssignId::_internal_string() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.string_;
}
inline void AssignId::_internal_set_string(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.string_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::GSWrapper_MessageType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::GSWrapper_MessageType>() {
  return ::GSWrapper_MessageType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_GSProtocol_2eproto_2epb_2eh
