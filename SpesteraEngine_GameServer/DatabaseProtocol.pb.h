// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DatabaseProtocol.proto
// Protobuf C++ Version: 4.25.1

#ifndef GOOGLE_PROTOBUF_INCLUDED_DatabaseProtocol_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_DatabaseProtocol_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4025001 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_DatabaseProtocol_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_DatabaseProtocol_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_DatabaseProtocol_2eproto;
class DbPlayerInitialData;
struct DbPlayerInitialDataDefaultTypeInternal;
extern DbPlayerInitialDataDefaultTypeInternal _DbPlayerInitialData_default_instance_;
class RequestPlayerInitialData;
struct RequestPlayerInitialDataDefaultTypeInternal;
extern RequestPlayerInitialDataDefaultTypeInternal _RequestPlayerInitialData_default_instance_;
class RequestWrapper;
struct RequestWrapperDefaultTypeInternal;
extern RequestWrapperDefaultTypeInternal _RequestWrapper_default_instance_;
class ResponsePlayerInitialData;
struct ResponsePlayerInitialDataDefaultTypeInternal;
extern ResponsePlayerInitialDataDefaultTypeInternal _ResponsePlayerInitialData_default_instance_;
class ResponseWrapper;
struct ResponseWrapperDefaultTypeInternal;
extern ResponseWrapperDefaultTypeInternal _ResponseWrapper_default_instance_;
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

enum RequestWrapper_RequestType : int {
  RequestWrapper_RequestType_REQUESTPLAYERINITIALDATA = 0,
  RequestWrapper_RequestType_RequestWrapper_RequestType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  RequestWrapper_RequestType_RequestWrapper_RequestType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool RequestWrapper_RequestType_IsValid(int value);
extern const uint32_t RequestWrapper_RequestType_internal_data_[];
constexpr RequestWrapper_RequestType RequestWrapper_RequestType_RequestType_MIN = static_cast<RequestWrapper_RequestType>(0);
constexpr RequestWrapper_RequestType RequestWrapper_RequestType_RequestType_MAX = static_cast<RequestWrapper_RequestType>(0);
constexpr int RequestWrapper_RequestType_RequestType_ARRAYSIZE = 0 + 1;
const ::google::protobuf::EnumDescriptor*
RequestWrapper_RequestType_descriptor();
template <typename T>
const std::string& RequestWrapper_RequestType_Name(T value) {
  static_assert(std::is_same<T, RequestWrapper_RequestType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to RequestType_Name().");
  return RequestWrapper_RequestType_Name(static_cast<RequestWrapper_RequestType>(value));
}
template <>
inline const std::string& RequestWrapper_RequestType_Name(RequestWrapper_RequestType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<RequestWrapper_RequestType_descriptor,
                                                 0, 0>(
      static_cast<int>(value));
}
inline bool RequestWrapper_RequestType_Parse(absl::string_view name, RequestWrapper_RequestType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RequestWrapper_RequestType>(
      RequestWrapper_RequestType_descriptor(), name, value);
}
enum ResponseWrapper_ResponseType : int {
  ResponseWrapper_ResponseType_RESPONSEPLAYERINITIALDATA = 0,
  ResponseWrapper_ResponseType_ResponseWrapper_ResponseType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  ResponseWrapper_ResponseType_ResponseWrapper_ResponseType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool ResponseWrapper_ResponseType_IsValid(int value);
extern const uint32_t ResponseWrapper_ResponseType_internal_data_[];
constexpr ResponseWrapper_ResponseType ResponseWrapper_ResponseType_ResponseType_MIN = static_cast<ResponseWrapper_ResponseType>(0);
constexpr ResponseWrapper_ResponseType ResponseWrapper_ResponseType_ResponseType_MAX = static_cast<ResponseWrapper_ResponseType>(0);
constexpr int ResponseWrapper_ResponseType_ResponseType_ARRAYSIZE = 0 + 1;
const ::google::protobuf::EnumDescriptor*
ResponseWrapper_ResponseType_descriptor();
template <typename T>
const std::string& ResponseWrapper_ResponseType_Name(T value) {
  static_assert(std::is_same<T, ResponseWrapper_ResponseType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to ResponseType_Name().");
  return ResponseWrapper_ResponseType_Name(static_cast<ResponseWrapper_ResponseType>(value));
}
template <>
inline const std::string& ResponseWrapper_ResponseType_Name(ResponseWrapper_ResponseType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<ResponseWrapper_ResponseType_descriptor,
                                                 0, 0>(
      static_cast<int>(value));
}
inline bool ResponseWrapper_ResponseType_Parse(absl::string_view name, ResponseWrapper_ResponseType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ResponseWrapper_ResponseType>(
      ResponseWrapper_ResponseType_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class ResponseWrapper final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ResponseWrapper) */ {
 public:
  inline ResponseWrapper() : ResponseWrapper(nullptr) {}
  ~ResponseWrapper() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ResponseWrapper(::google::protobuf::internal::ConstantInitialized);

  inline ResponseWrapper(const ResponseWrapper& from)
      : ResponseWrapper(nullptr, from) {}
  ResponseWrapper(ResponseWrapper&& from) noexcept
    : ResponseWrapper() {
    *this = ::std::move(from);
  }

  inline ResponseWrapper& operator=(const ResponseWrapper& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResponseWrapper& operator=(ResponseWrapper&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResponseWrapper& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResponseWrapper* internal_default_instance() {
    return reinterpret_cast<const ResponseWrapper*>(
               &_ResponseWrapper_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ResponseWrapper& a, ResponseWrapper& b) {
    a.Swap(&b);
  }
  inline void Swap(ResponseWrapper* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResponseWrapper* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResponseWrapper* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ResponseWrapper>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ResponseWrapper& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ResponseWrapper& from) {
    ResponseWrapper::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ResponseWrapper* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ResponseWrapper";
  }
  protected:
  explicit ResponseWrapper(::google::protobuf::Arena* arena);
  ResponseWrapper(::google::protobuf::Arena* arena, const ResponseWrapper& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using ResponseType = ResponseWrapper_ResponseType;
  static constexpr ResponseType RESPONSEPLAYERINITIALDATA = ResponseWrapper_ResponseType_RESPONSEPLAYERINITIALDATA;
  static inline bool ResponseType_IsValid(int value) {
    return ResponseWrapper_ResponseType_IsValid(value);
  }
  static constexpr ResponseType ResponseType_MIN = ResponseWrapper_ResponseType_ResponseType_MIN;
  static constexpr ResponseType ResponseType_MAX = ResponseWrapper_ResponseType_ResponseType_MAX;
  static constexpr int ResponseType_ARRAYSIZE = ResponseWrapper_ResponseType_ResponseType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* ResponseType_descriptor() {
    return ResponseWrapper_ResponseType_descriptor();
  }
  template <typename T>
  static inline const std::string& ResponseType_Name(T value) {
    return ResponseWrapper_ResponseType_Name(value);
  }
  static inline bool ResponseType_Parse(absl::string_view name, ResponseType* value) {
    return ResponseWrapper_ResponseType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kResponsePayloadFieldNumber = 2,
    kResponseTypeFieldNumber = 1,
  };
  // bytes response_payload = 2;
  void clear_response_payload() ;
  const std::string& response_payload() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_response_payload(Arg_&& arg, Args_... args);
  std::string* mutable_response_payload();
  PROTOBUF_NODISCARD std::string* release_response_payload();
  void set_allocated_response_payload(std::string* value);

  private:
  const std::string& _internal_response_payload() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_response_payload(
      const std::string& value);
  std::string* _internal_mutable_response_payload();

  public:
  // .ResponseWrapper.ResponseType response_type = 1;
  void clear_response_type() ;
  ::ResponseWrapper_ResponseType response_type() const;
  void set_response_type(::ResponseWrapper_ResponseType value);

  private:
  ::ResponseWrapper_ResponseType _internal_response_type() const;
  void _internal_set_response_type(::ResponseWrapper_ResponseType value);

  public:
  // @@protoc_insertion_point(class_scope:ResponseWrapper)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr response_payload_;
    int response_type_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_DatabaseProtocol_2eproto;
};// -------------------------------------------------------------------

class RequestWrapper final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:RequestWrapper) */ {
 public:
  inline RequestWrapper() : RequestWrapper(nullptr) {}
  ~RequestWrapper() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR RequestWrapper(::google::protobuf::internal::ConstantInitialized);

  inline RequestWrapper(const RequestWrapper& from)
      : RequestWrapper(nullptr, from) {}
  RequestWrapper(RequestWrapper&& from) noexcept
    : RequestWrapper() {
    *this = ::std::move(from);
  }

  inline RequestWrapper& operator=(const RequestWrapper& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestWrapper& operator=(RequestWrapper&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RequestWrapper& default_instance() {
    return *internal_default_instance();
  }
  static inline const RequestWrapper* internal_default_instance() {
    return reinterpret_cast<const RequestWrapper*>(
               &_RequestWrapper_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RequestWrapper& a, RequestWrapper& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestWrapper* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestWrapper* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RequestWrapper* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RequestWrapper>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const RequestWrapper& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const RequestWrapper& from) {
    RequestWrapper::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(RequestWrapper* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "RequestWrapper";
  }
  protected:
  explicit RequestWrapper(::google::protobuf::Arena* arena);
  RequestWrapper(::google::protobuf::Arena* arena, const RequestWrapper& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using RequestType = RequestWrapper_RequestType;
  static constexpr RequestType REQUESTPLAYERINITIALDATA = RequestWrapper_RequestType_REQUESTPLAYERINITIALDATA;
  static inline bool RequestType_IsValid(int value) {
    return RequestWrapper_RequestType_IsValid(value);
  }
  static constexpr RequestType RequestType_MIN = RequestWrapper_RequestType_RequestType_MIN;
  static constexpr RequestType RequestType_MAX = RequestWrapper_RequestType_RequestType_MAX;
  static constexpr int RequestType_ARRAYSIZE = RequestWrapper_RequestType_RequestType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* RequestType_descriptor() {
    return RequestWrapper_RequestType_descriptor();
  }
  template <typename T>
  static inline const std::string& RequestType_Name(T value) {
    return RequestWrapper_RequestType_Name(value);
  }
  static inline bool RequestType_Parse(absl::string_view name, RequestType* value) {
    return RequestWrapper_RequestType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kRequestPayloadFieldNumber = 2,
    kRequestTypeFieldNumber = 1,
  };
  // bytes request_payload = 2;
  void clear_request_payload() ;
  const std::string& request_payload() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_request_payload(Arg_&& arg, Args_... args);
  std::string* mutable_request_payload();
  PROTOBUF_NODISCARD std::string* release_request_payload();
  void set_allocated_request_payload(std::string* value);

  private:
  const std::string& _internal_request_payload() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_request_payload(
      const std::string& value);
  std::string* _internal_mutable_request_payload();

  public:
  // .RequestWrapper.RequestType request_type = 1;
  void clear_request_type() ;
  ::RequestWrapper_RequestType request_type() const;
  void set_request_type(::RequestWrapper_RequestType value);

  private:
  ::RequestWrapper_RequestType _internal_request_type() const;
  void _internal_set_request_type(::RequestWrapper_RequestType value);

  public:
  // @@protoc_insertion_point(class_scope:RequestWrapper)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr request_payload_;
    int request_type_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_DatabaseProtocol_2eproto;
};// -------------------------------------------------------------------

class RequestPlayerInitialData final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:RequestPlayerInitialData) */ {
 public:
  inline RequestPlayerInitialData() : RequestPlayerInitialData(nullptr) {}
  ~RequestPlayerInitialData() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR RequestPlayerInitialData(::google::protobuf::internal::ConstantInitialized);

  inline RequestPlayerInitialData(const RequestPlayerInitialData& from)
      : RequestPlayerInitialData(nullptr, from) {}
  RequestPlayerInitialData(RequestPlayerInitialData&& from) noexcept
    : RequestPlayerInitialData() {
    *this = ::std::move(from);
  }

  inline RequestPlayerInitialData& operator=(const RequestPlayerInitialData& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestPlayerInitialData& operator=(RequestPlayerInitialData&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RequestPlayerInitialData& default_instance() {
    return *internal_default_instance();
  }
  static inline const RequestPlayerInitialData* internal_default_instance() {
    return reinterpret_cast<const RequestPlayerInitialData*>(
               &_RequestPlayerInitialData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(RequestPlayerInitialData& a, RequestPlayerInitialData& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestPlayerInitialData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestPlayerInitialData* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RequestPlayerInitialData* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RequestPlayerInitialData>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const RequestPlayerInitialData& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const RequestPlayerInitialData& from) {
    RequestPlayerInitialData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(RequestPlayerInitialData* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "RequestPlayerInitialData";
  }
  protected:
  explicit RequestPlayerInitialData(::google::protobuf::Arena* arena);
  RequestPlayerInitialData(::google::protobuf::Arena* arena, const RequestPlayerInitialData& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerGuidFieldNumber = 1,
  };
  // string player_guid = 1;
  void clear_player_guid() ;
  const std::string& player_guid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_player_guid(Arg_&& arg, Args_... args);
  std::string* mutable_player_guid();
  PROTOBUF_NODISCARD std::string* release_player_guid();
  void set_allocated_player_guid(std::string* value);

  private:
  const std::string& _internal_player_guid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_player_guid(
      const std::string& value);
  std::string* _internal_mutable_player_guid();

  public:
  // @@protoc_insertion_point(class_scope:RequestPlayerInitialData)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      44, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr player_guid_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_DatabaseProtocol_2eproto;
};// -------------------------------------------------------------------

class DbPlayerInitialData final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:DbPlayerInitialData) */ {
 public:
  inline DbPlayerInitialData() : DbPlayerInitialData(nullptr) {}
  ~DbPlayerInitialData() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR DbPlayerInitialData(::google::protobuf::internal::ConstantInitialized);

  inline DbPlayerInitialData(const DbPlayerInitialData& from)
      : DbPlayerInitialData(nullptr, from) {}
  DbPlayerInitialData(DbPlayerInitialData&& from) noexcept
    : DbPlayerInitialData() {
    *this = ::std::move(from);
  }

  inline DbPlayerInitialData& operator=(const DbPlayerInitialData& from) {
    CopyFrom(from);
    return *this;
  }
  inline DbPlayerInitialData& operator=(DbPlayerInitialData&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DbPlayerInitialData& default_instance() {
    return *internal_default_instance();
  }
  static inline const DbPlayerInitialData* internal_default_instance() {
    return reinterpret_cast<const DbPlayerInitialData*>(
               &_DbPlayerInitialData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(DbPlayerInitialData& a, DbPlayerInitialData& b) {
    a.Swap(&b);
  }
  inline void Swap(DbPlayerInitialData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DbPlayerInitialData* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DbPlayerInitialData* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DbPlayerInitialData>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const DbPlayerInitialData& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const DbPlayerInitialData& from) {
    DbPlayerInitialData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(DbPlayerInitialData* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "DbPlayerInitialData";
  }
  protected:
  explicit DbPlayerInitialData(::google::protobuf::Arena* arena);
  DbPlayerInitialData(::google::protobuf::Arena* arena, const DbPlayerInitialData& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerNameFieldNumber = 2,
    kPlayerIdFieldNumber = 1,
    kPositionXFieldNumber = 3,
    kPositionYFieldNumber = 4,
    kPositionZFieldNumber = 5,
    kRotationYFieldNumber = 6,
    kPlayerMovementspeedFieldNumber = 7,
  };
  // string player_name = 2;
  void clear_player_name() ;
  const std::string& player_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_player_name(Arg_&& arg, Args_... args);
  std::string* mutable_player_name();
  PROTOBUF_NODISCARD std::string* release_player_name();
  void set_allocated_player_name(std::string* value);

  private:
  const std::string& _internal_player_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_player_name(
      const std::string& value);
  std::string* _internal_mutable_player_name();

  public:
  // uint32 player_id = 1;
  void clear_player_id() ;
  ::uint32_t player_id() const;
  void set_player_id(::uint32_t value);

  private:
  ::uint32_t _internal_player_id() const;
  void _internal_set_player_id(::uint32_t value);

  public:
  // float position_x = 3;
  void clear_position_x() ;
  float position_x() const;
  void set_position_x(float value);

  private:
  float _internal_position_x() const;
  void _internal_set_position_x(float value);

  public:
  // float position_y = 4;
  void clear_position_y() ;
  float position_y() const;
  void set_position_y(float value);

  private:
  float _internal_position_y() const;
  void _internal_set_position_y(float value);

  public:
  // float position_z = 5;
  void clear_position_z() ;
  float position_z() const;
  void set_position_z(float value);

  private:
  float _internal_position_z() const;
  void _internal_set_position_z(float value);

  public:
  // uint32 rotation_y = 6;
  void clear_rotation_y() ;
  ::uint32_t rotation_y() const;
  void set_rotation_y(::uint32_t value);

  private:
  ::uint32_t _internal_rotation_y() const;
  void _internal_set_rotation_y(::uint32_t value);

  public:
  // uint32 player_movementspeed = 7;
  void clear_player_movementspeed() ;
  ::uint32_t player_movementspeed() const;
  void set_player_movementspeed(::uint32_t value);

  private:
  ::uint32_t _internal_player_movementspeed() const;
  void _internal_set_player_movementspeed(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:DbPlayerInitialData)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 7, 0,
      39, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr player_name_;
    ::uint32_t player_id_;
    float position_x_;
    float position_y_;
    float position_z_;
    ::uint32_t rotation_y_;
    ::uint32_t player_movementspeed_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_DatabaseProtocol_2eproto;
};// -------------------------------------------------------------------

class ResponsePlayerInitialData final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ResponsePlayerInitialData) */ {
 public:
  inline ResponsePlayerInitialData() : ResponsePlayerInitialData(nullptr) {}
  ~ResponsePlayerInitialData() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ResponsePlayerInitialData(::google::protobuf::internal::ConstantInitialized);

  inline ResponsePlayerInitialData(const ResponsePlayerInitialData& from)
      : ResponsePlayerInitialData(nullptr, from) {}
  ResponsePlayerInitialData(ResponsePlayerInitialData&& from) noexcept
    : ResponsePlayerInitialData() {
    *this = ::std::move(from);
  }

  inline ResponsePlayerInitialData& operator=(const ResponsePlayerInitialData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResponsePlayerInitialData& operator=(ResponsePlayerInitialData&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResponsePlayerInitialData& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResponsePlayerInitialData* internal_default_instance() {
    return reinterpret_cast<const ResponsePlayerInitialData*>(
               &_ResponsePlayerInitialData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ResponsePlayerInitialData& a, ResponsePlayerInitialData& b) {
    a.Swap(&b);
  }
  inline void Swap(ResponsePlayerInitialData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResponsePlayerInitialData* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResponsePlayerInitialData* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ResponsePlayerInitialData>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ResponsePlayerInitialData& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ResponsePlayerInitialData& from) {
    ResponsePlayerInitialData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ResponsePlayerInitialData* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ResponsePlayerInitialData";
  }
  protected:
  explicit ResponsePlayerInitialData(::google::protobuf::Arena* arena);
  ResponsePlayerInitialData(::google::protobuf::Arena* arena, const ResponsePlayerInitialData& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerInitialDataFieldNumber = 1,
  };
  // .DbPlayerInitialData player_initial_data = 1;
  bool has_player_initial_data() const;
  void clear_player_initial_data() ;
  const ::DbPlayerInitialData& player_initial_data() const;
  PROTOBUF_NODISCARD ::DbPlayerInitialData* release_player_initial_data();
  ::DbPlayerInitialData* mutable_player_initial_data();
  void set_allocated_player_initial_data(::DbPlayerInitialData* value);
  void unsafe_arena_set_allocated_player_initial_data(::DbPlayerInitialData* value);
  ::DbPlayerInitialData* unsafe_arena_release_player_initial_data();

  private:
  const ::DbPlayerInitialData& _internal_player_initial_data() const;
  ::DbPlayerInitialData* _internal_mutable_player_initial_data();

  public:
  // @@protoc_insertion_point(class_scope:ResponsePlayerInitialData)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::DbPlayerInitialData* player_initial_data_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_DatabaseProtocol_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// RequestWrapper

// .RequestWrapper.RequestType request_type = 1;
inline void RequestWrapper::clear_request_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.request_type_ = 0;
}
inline ::RequestWrapper_RequestType RequestWrapper::request_type() const {
  // @@protoc_insertion_point(field_get:RequestWrapper.request_type)
  return _internal_request_type();
}
inline void RequestWrapper::set_request_type(::RequestWrapper_RequestType value) {
  _internal_set_request_type(value);
  // @@protoc_insertion_point(field_set:RequestWrapper.request_type)
}
inline ::RequestWrapper_RequestType RequestWrapper::_internal_request_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::RequestWrapper_RequestType>(_impl_.request_type_);
}
inline void RequestWrapper::_internal_set_request_type(::RequestWrapper_RequestType value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.request_type_ = value;
}

// bytes request_payload = 2;
inline void RequestWrapper::clear_request_payload() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.request_payload_.ClearToEmpty();
}
inline const std::string& RequestWrapper::request_payload() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:RequestWrapper.request_payload)
  return _internal_request_payload();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RequestWrapper::set_request_payload(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.request_payload_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:RequestWrapper.request_payload)
}
inline std::string* RequestWrapper::mutable_request_payload() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_request_payload();
  // @@protoc_insertion_point(field_mutable:RequestWrapper.request_payload)
  return _s;
}
inline const std::string& RequestWrapper::_internal_request_payload() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.request_payload_.Get();
}
inline void RequestWrapper::_internal_set_request_payload(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.request_payload_.Set(value, GetArena());
}
inline std::string* RequestWrapper::_internal_mutable_request_payload() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.request_payload_.Mutable( GetArena());
}
inline std::string* RequestWrapper::release_request_payload() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:RequestWrapper.request_payload)
  return _impl_.request_payload_.Release();
}
inline void RequestWrapper::set_allocated_request_payload(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.request_payload_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.request_payload_.IsDefault()) {
          _impl_.request_payload_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:RequestWrapper.request_payload)
}

// -------------------------------------------------------------------

// ResponseWrapper

// .ResponseWrapper.ResponseType response_type = 1;
inline void ResponseWrapper::clear_response_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.response_type_ = 0;
}
inline ::ResponseWrapper_ResponseType ResponseWrapper::response_type() const {
  // @@protoc_insertion_point(field_get:ResponseWrapper.response_type)
  return _internal_response_type();
}
inline void ResponseWrapper::set_response_type(::ResponseWrapper_ResponseType value) {
  _internal_set_response_type(value);
  // @@protoc_insertion_point(field_set:ResponseWrapper.response_type)
}
inline ::ResponseWrapper_ResponseType ResponseWrapper::_internal_response_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::ResponseWrapper_ResponseType>(_impl_.response_type_);
}
inline void ResponseWrapper::_internal_set_response_type(::ResponseWrapper_ResponseType value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.response_type_ = value;
}

// bytes response_payload = 2;
inline void ResponseWrapper::clear_response_payload() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.response_payload_.ClearToEmpty();
}
inline const std::string& ResponseWrapper::response_payload() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ResponseWrapper.response_payload)
  return _internal_response_payload();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ResponseWrapper::set_response_payload(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.response_payload_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ResponseWrapper.response_payload)
}
inline std::string* ResponseWrapper::mutable_response_payload() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_response_payload();
  // @@protoc_insertion_point(field_mutable:ResponseWrapper.response_payload)
  return _s;
}
inline const std::string& ResponseWrapper::_internal_response_payload() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.response_payload_.Get();
}
inline void ResponseWrapper::_internal_set_response_payload(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.response_payload_.Set(value, GetArena());
}
inline std::string* ResponseWrapper::_internal_mutable_response_payload() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.response_payload_.Mutable( GetArena());
}
inline std::string* ResponseWrapper::release_response_payload() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ResponseWrapper.response_payload)
  return _impl_.response_payload_.Release();
}
inline void ResponseWrapper::set_allocated_response_payload(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.response_payload_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.response_payload_.IsDefault()) {
          _impl_.response_payload_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ResponseWrapper.response_payload)
}

// -------------------------------------------------------------------

// RequestPlayerInitialData

// string player_guid = 1;
inline void RequestPlayerInitialData::clear_player_guid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.player_guid_.ClearToEmpty();
}
inline const std::string& RequestPlayerInitialData::player_guid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:RequestPlayerInitialData.player_guid)
  return _internal_player_guid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RequestPlayerInitialData::set_player_guid(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.player_guid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:RequestPlayerInitialData.player_guid)
}
inline std::string* RequestPlayerInitialData::mutable_player_guid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_player_guid();
  // @@protoc_insertion_point(field_mutable:RequestPlayerInitialData.player_guid)
  return _s;
}
inline const std::string& RequestPlayerInitialData::_internal_player_guid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.player_guid_.Get();
}
inline void RequestPlayerInitialData::_internal_set_player_guid(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.player_guid_.Set(value, GetArena());
}
inline std::string* RequestPlayerInitialData::_internal_mutable_player_guid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.player_guid_.Mutable( GetArena());
}
inline std::string* RequestPlayerInitialData::release_player_guid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:RequestPlayerInitialData.player_guid)
  return _impl_.player_guid_.Release();
}
inline void RequestPlayerInitialData::set_allocated_player_guid(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.player_guid_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.player_guid_.IsDefault()) {
          _impl_.player_guid_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:RequestPlayerInitialData.player_guid)
}

// -------------------------------------------------------------------

// ResponsePlayerInitialData

// .DbPlayerInitialData player_initial_data = 1;
inline bool ResponsePlayerInitialData::has_player_initial_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.player_initial_data_ != nullptr);
  return value;
}
inline void ResponsePlayerInitialData::clear_player_initial_data() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.player_initial_data_ != nullptr) _impl_.player_initial_data_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::DbPlayerInitialData& ResponsePlayerInitialData::_internal_player_initial_data() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::DbPlayerInitialData* p = _impl_.player_initial_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::DbPlayerInitialData&>(::_DbPlayerInitialData_default_instance_);
}
inline const ::DbPlayerInitialData& ResponsePlayerInitialData::player_initial_data() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ResponsePlayerInitialData.player_initial_data)
  return _internal_player_initial_data();
}
inline void ResponsePlayerInitialData::unsafe_arena_set_allocated_player_initial_data(::DbPlayerInitialData* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.player_initial_data_);
  }
  _impl_.player_initial_data_ = reinterpret_cast<::DbPlayerInitialData*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ResponsePlayerInitialData.player_initial_data)
}
inline ::DbPlayerInitialData* ResponsePlayerInitialData::release_player_initial_data() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::DbPlayerInitialData* released = _impl_.player_initial_data_;
  _impl_.player_initial_data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::DbPlayerInitialData* ResponsePlayerInitialData::unsafe_arena_release_player_initial_data() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ResponsePlayerInitialData.player_initial_data)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::DbPlayerInitialData* temp = _impl_.player_initial_data_;
  _impl_.player_initial_data_ = nullptr;
  return temp;
}
inline ::DbPlayerInitialData* ResponsePlayerInitialData::_internal_mutable_player_initial_data() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.player_initial_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::DbPlayerInitialData>(GetArena());
    _impl_.player_initial_data_ = reinterpret_cast<::DbPlayerInitialData*>(p);
  }
  return _impl_.player_initial_data_;
}
inline ::DbPlayerInitialData* ResponsePlayerInitialData::mutable_player_initial_data() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::DbPlayerInitialData* _msg = _internal_mutable_player_initial_data();
  // @@protoc_insertion_point(field_mutable:ResponsePlayerInitialData.player_initial_data)
  return _msg;
}
inline void ResponsePlayerInitialData::set_allocated_player_initial_data(::DbPlayerInitialData* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::DbPlayerInitialData*>(_impl_.player_initial_data_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::DbPlayerInitialData*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.player_initial_data_ = reinterpret_cast<::DbPlayerInitialData*>(value);
  // @@protoc_insertion_point(field_set_allocated:ResponsePlayerInitialData.player_initial_data)
}

// -------------------------------------------------------------------

// DbPlayerInitialData

// uint32 player_id = 1;
inline void DbPlayerInitialData::clear_player_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.player_id_ = 0u;
}
inline ::uint32_t DbPlayerInitialData::player_id() const {
  // @@protoc_insertion_point(field_get:DbPlayerInitialData.player_id)
  return _internal_player_id();
}
inline void DbPlayerInitialData::set_player_id(::uint32_t value) {
  _internal_set_player_id(value);
  // @@protoc_insertion_point(field_set:DbPlayerInitialData.player_id)
}
inline ::uint32_t DbPlayerInitialData::_internal_player_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.player_id_;
}
inline void DbPlayerInitialData::_internal_set_player_id(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.player_id_ = value;
}

// string player_name = 2;
inline void DbPlayerInitialData::clear_player_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.player_name_.ClearToEmpty();
}
inline const std::string& DbPlayerInitialData::player_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:DbPlayerInitialData.player_name)
  return _internal_player_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DbPlayerInitialData::set_player_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.player_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:DbPlayerInitialData.player_name)
}
inline std::string* DbPlayerInitialData::mutable_player_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_player_name();
  // @@protoc_insertion_point(field_mutable:DbPlayerInitialData.player_name)
  return _s;
}
inline const std::string& DbPlayerInitialData::_internal_player_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.player_name_.Get();
}
inline void DbPlayerInitialData::_internal_set_player_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.player_name_.Set(value, GetArena());
}
inline std::string* DbPlayerInitialData::_internal_mutable_player_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.player_name_.Mutable( GetArena());
}
inline std::string* DbPlayerInitialData::release_player_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:DbPlayerInitialData.player_name)
  return _impl_.player_name_.Release();
}
inline void DbPlayerInitialData::set_allocated_player_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.player_name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.player_name_.IsDefault()) {
          _impl_.player_name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:DbPlayerInitialData.player_name)
}

// float position_x = 3;
inline void DbPlayerInitialData::clear_position_x() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.position_x_ = 0;
}
inline float DbPlayerInitialData::position_x() const {
  // @@protoc_insertion_point(field_get:DbPlayerInitialData.position_x)
  return _internal_position_x();
}
inline void DbPlayerInitialData::set_position_x(float value) {
  _internal_set_position_x(value);
  // @@protoc_insertion_point(field_set:DbPlayerInitialData.position_x)
}
inline float DbPlayerInitialData::_internal_position_x() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.position_x_;
}
inline void DbPlayerInitialData::_internal_set_position_x(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.position_x_ = value;
}

// float position_y = 4;
inline void DbPlayerInitialData::clear_position_y() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.position_y_ = 0;
}
inline float DbPlayerInitialData::position_y() const {
  // @@protoc_insertion_point(field_get:DbPlayerInitialData.position_y)
  return _internal_position_y();
}
inline void DbPlayerInitialData::set_position_y(float value) {
  _internal_set_position_y(value);
  // @@protoc_insertion_point(field_set:DbPlayerInitialData.position_y)
}
inline float DbPlayerInitialData::_internal_position_y() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.position_y_;
}
inline void DbPlayerInitialData::_internal_set_position_y(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.position_y_ = value;
}

// float position_z = 5;
inline void DbPlayerInitialData::clear_position_z() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.position_z_ = 0;
}
inline float DbPlayerInitialData::position_z() const {
  // @@protoc_insertion_point(field_get:DbPlayerInitialData.position_z)
  return _internal_position_z();
}
inline void DbPlayerInitialData::set_position_z(float value) {
  _internal_set_position_z(value);
  // @@protoc_insertion_point(field_set:DbPlayerInitialData.position_z)
}
inline float DbPlayerInitialData::_internal_position_z() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.position_z_;
}
inline void DbPlayerInitialData::_internal_set_position_z(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.position_z_ = value;
}

// uint32 rotation_y = 6;
inline void DbPlayerInitialData::clear_rotation_y() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.rotation_y_ = 0u;
}
inline ::uint32_t DbPlayerInitialData::rotation_y() const {
  // @@protoc_insertion_point(field_get:DbPlayerInitialData.rotation_y)
  return _internal_rotation_y();
}
inline void DbPlayerInitialData::set_rotation_y(::uint32_t value) {
  _internal_set_rotation_y(value);
  // @@protoc_insertion_point(field_set:DbPlayerInitialData.rotation_y)
}
inline ::uint32_t DbPlayerInitialData::_internal_rotation_y() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.rotation_y_;
}
inline void DbPlayerInitialData::_internal_set_rotation_y(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.rotation_y_ = value;
}

// uint32 player_movementspeed = 7;
inline void DbPlayerInitialData::clear_player_movementspeed() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.player_movementspeed_ = 0u;
}
inline ::uint32_t DbPlayerInitialData::player_movementspeed() const {
  // @@protoc_insertion_point(field_get:DbPlayerInitialData.player_movementspeed)
  return _internal_player_movementspeed();
}
inline void DbPlayerInitialData::set_player_movementspeed(::uint32_t value) {
  _internal_set_player_movementspeed(value);
  // @@protoc_insertion_point(field_set:DbPlayerInitialData.player_movementspeed)
}
inline ::uint32_t DbPlayerInitialData::_internal_player_movementspeed() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.player_movementspeed_;
}
inline void DbPlayerInitialData::_internal_set_player_movementspeed(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.player_movementspeed_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::RequestWrapper_RequestType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::RequestWrapper_RequestType>() {
  return ::RequestWrapper_RequestType_descriptor();
}
template <>
struct is_proto_enum<::ResponseWrapper_ResponseType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::ResponseWrapper_ResponseType>() {
  return ::ResponseWrapper_ResponseType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_DatabaseProtocol_2eproto_2epb_2eh
