// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DatabaseProtocol.proto
// Protobuf C++ Version: 4.25.1

#ifndef GOOGLE_PROTOBUF_INCLUDED_DatabaseProtocol_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_DatabaseProtocol_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4025001 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "AccountService.pb.h"
#include "GameCharacterService.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_DatabaseProtocol_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_DatabaseProtocol_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_DatabaseProtocol_2eproto;
class DatabaseRequestWrapper;
struct DatabaseRequestWrapperDefaultTypeInternal;
extern DatabaseRequestWrapperDefaultTypeInternal _DatabaseRequestWrapper_default_instance_;
class DatabaseResponseWrapper;
struct DatabaseResponseWrapperDefaultTypeInternal;
extern DatabaseResponseWrapperDefaultTypeInternal _DatabaseResponseWrapper_default_instance_;
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google


// ===================================================================


// -------------------------------------------------------------------

class DatabaseRequestWrapper final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:DatabaseRequestWrapper) */ {
 public:
  inline DatabaseRequestWrapper() : DatabaseRequestWrapper(nullptr) {}
  ~DatabaseRequestWrapper() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR DatabaseRequestWrapper(::google::protobuf::internal::ConstantInitialized);

  inline DatabaseRequestWrapper(const DatabaseRequestWrapper& from)
      : DatabaseRequestWrapper(nullptr, from) {}
  DatabaseRequestWrapper(DatabaseRequestWrapper&& from) noexcept
    : DatabaseRequestWrapper() {
    *this = ::std::move(from);
  }

  inline DatabaseRequestWrapper& operator=(const DatabaseRequestWrapper& from) {
    CopyFrom(from);
    return *this;
  }
  inline DatabaseRequestWrapper& operator=(DatabaseRequestWrapper&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DatabaseRequestWrapper& default_instance() {
    return *internal_default_instance();
  }
  enum ServiceRequestCase {
    kAccountServiceRequest = 2,
    kGamecharacterServiceRequest = 3,
    SERVICE_REQUEST_NOT_SET = 0,
  };

  static inline const DatabaseRequestWrapper* internal_default_instance() {
    return reinterpret_cast<const DatabaseRequestWrapper*>(
               &_DatabaseRequestWrapper_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DatabaseRequestWrapper& a, DatabaseRequestWrapper& b) {
    a.Swap(&b);
  }
  inline void Swap(DatabaseRequestWrapper* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DatabaseRequestWrapper* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DatabaseRequestWrapper* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DatabaseRequestWrapper>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const DatabaseRequestWrapper& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const DatabaseRequestWrapper& from) {
    DatabaseRequestWrapper::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(DatabaseRequestWrapper* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "DatabaseRequestWrapper";
  }
  protected:
  explicit DatabaseRequestWrapper(::google::protobuf::Arena* arena);
  DatabaseRequestWrapper(::google::protobuf::Arena* arena, const DatabaseRequestWrapper& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSessionIdFieldNumber = 1,
    kAccountServiceRequestFieldNumber = 2,
    kGamecharacterServiceRequestFieldNumber = 3,
  };
  // uint32 session_id = 1;
  void clear_session_id() ;
  ::uint32_t session_id() const;
  void set_session_id(::uint32_t value);

  private:
  ::uint32_t _internal_session_id() const;
  void _internal_set_session_id(::uint32_t value);

  public:
  // .AccountServiceRequestWrapper account_service_request = 2;
  bool has_account_service_request() const;
  private:
  bool _internal_has_account_service_request() const;

  public:
  void clear_account_service_request() ;
  const ::AccountServiceRequestWrapper& account_service_request() const;
  PROTOBUF_NODISCARD ::AccountServiceRequestWrapper* release_account_service_request();
  ::AccountServiceRequestWrapper* mutable_account_service_request();
  void set_allocated_account_service_request(::AccountServiceRequestWrapper* value);
  void unsafe_arena_set_allocated_account_service_request(::AccountServiceRequestWrapper* value);
  ::AccountServiceRequestWrapper* unsafe_arena_release_account_service_request();

  private:
  const ::AccountServiceRequestWrapper& _internal_account_service_request() const;
  ::AccountServiceRequestWrapper* _internal_mutable_account_service_request();

  public:
  // .GameCharacterServiceRequestWrapper gamecharacter_service_request = 3;
  bool has_gamecharacter_service_request() const;
  private:
  bool _internal_has_gamecharacter_service_request() const;

  public:
  void clear_gamecharacter_service_request() ;
  const ::GameCharacterServiceRequestWrapper& gamecharacter_service_request() const;
  PROTOBUF_NODISCARD ::GameCharacterServiceRequestWrapper* release_gamecharacter_service_request();
  ::GameCharacterServiceRequestWrapper* mutable_gamecharacter_service_request();
  void set_allocated_gamecharacter_service_request(::GameCharacterServiceRequestWrapper* value);
  void unsafe_arena_set_allocated_gamecharacter_service_request(::GameCharacterServiceRequestWrapper* value);
  ::GameCharacterServiceRequestWrapper* unsafe_arena_release_gamecharacter_service_request();

  private:
  const ::GameCharacterServiceRequestWrapper& _internal_gamecharacter_service_request() const;
  ::GameCharacterServiceRequestWrapper* _internal_mutable_gamecharacter_service_request();

  public:
  void clear_service_request();
  ServiceRequestCase service_request_case() const;
  // @@protoc_insertion_point(class_scope:DatabaseRequestWrapper)
 private:
  class _Internal;
  void set_has_account_service_request();
  void set_has_gamecharacter_service_request();

  inline bool has_service_request() const;
  inline void clear_has_service_request();

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 3, 2,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::uint32_t session_id_;
    union ServiceRequestUnion {
      constexpr ServiceRequestUnion() : _constinit_{} {}
        ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::AccountServiceRequestWrapper* account_service_request_;
      ::GameCharacterServiceRequestWrapper* gamecharacter_service_request_;
    } service_request_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];

    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_DatabaseProtocol_2eproto;
};// -------------------------------------------------------------------

class DatabaseResponseWrapper final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:DatabaseResponseWrapper) */ {
 public:
  inline DatabaseResponseWrapper() : DatabaseResponseWrapper(nullptr) {}
  ~DatabaseResponseWrapper() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR DatabaseResponseWrapper(::google::protobuf::internal::ConstantInitialized);

  inline DatabaseResponseWrapper(const DatabaseResponseWrapper& from)
      : DatabaseResponseWrapper(nullptr, from) {}
  DatabaseResponseWrapper(DatabaseResponseWrapper&& from) noexcept
    : DatabaseResponseWrapper() {
    *this = ::std::move(from);
  }

  inline DatabaseResponseWrapper& operator=(const DatabaseResponseWrapper& from) {
    CopyFrom(from);
    return *this;
  }
  inline DatabaseResponseWrapper& operator=(DatabaseResponseWrapper&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DatabaseResponseWrapper& default_instance() {
    return *internal_default_instance();
  }
  enum ServiceResponseCase {
    kAccountServiceResponse = 2,
    kGamecharacterServiceResponse = 3,
    SERVICE_RESPONSE_NOT_SET = 0,
  };

  static inline const DatabaseResponseWrapper* internal_default_instance() {
    return reinterpret_cast<const DatabaseResponseWrapper*>(
               &_DatabaseResponseWrapper_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(DatabaseResponseWrapper& a, DatabaseResponseWrapper& b) {
    a.Swap(&b);
  }
  inline void Swap(DatabaseResponseWrapper* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DatabaseResponseWrapper* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DatabaseResponseWrapper* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DatabaseResponseWrapper>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const DatabaseResponseWrapper& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const DatabaseResponseWrapper& from) {
    DatabaseResponseWrapper::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(DatabaseResponseWrapper* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "DatabaseResponseWrapper";
  }
  protected:
  explicit DatabaseResponseWrapper(::google::protobuf::Arena* arena);
  DatabaseResponseWrapper(::google::protobuf::Arena* arena, const DatabaseResponseWrapper& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSessionIdFieldNumber = 1,
    kAccountServiceResponseFieldNumber = 2,
    kGamecharacterServiceResponseFieldNumber = 3,
  };
  // uint32 session_id = 1;
  void clear_session_id() ;
  ::uint32_t session_id() const;
  void set_session_id(::uint32_t value);

  private:
  ::uint32_t _internal_session_id() const;
  void _internal_set_session_id(::uint32_t value);

  public:
  // .AccountServiceResponseWrapper account_service_response = 2;
  bool has_account_service_response() const;
  private:
  bool _internal_has_account_service_response() const;

  public:
  void clear_account_service_response() ;
  const ::AccountServiceResponseWrapper& account_service_response() const;
  PROTOBUF_NODISCARD ::AccountServiceResponseWrapper* release_account_service_response();
  ::AccountServiceResponseWrapper* mutable_account_service_response();
  void set_allocated_account_service_response(::AccountServiceResponseWrapper* value);
  void unsafe_arena_set_allocated_account_service_response(::AccountServiceResponseWrapper* value);
  ::AccountServiceResponseWrapper* unsafe_arena_release_account_service_response();

  private:
  const ::AccountServiceResponseWrapper& _internal_account_service_response() const;
  ::AccountServiceResponseWrapper* _internal_mutable_account_service_response();

  public:
  // .GameCharacterServiceResponseWrapper gamecharacter_service_response = 3;
  bool has_gamecharacter_service_response() const;
  private:
  bool _internal_has_gamecharacter_service_response() const;

  public:
  void clear_gamecharacter_service_response() ;
  const ::GameCharacterServiceResponseWrapper& gamecharacter_service_response() const;
  PROTOBUF_NODISCARD ::GameCharacterServiceResponseWrapper* release_gamecharacter_service_response();
  ::GameCharacterServiceResponseWrapper* mutable_gamecharacter_service_response();
  void set_allocated_gamecharacter_service_response(::GameCharacterServiceResponseWrapper* value);
  void unsafe_arena_set_allocated_gamecharacter_service_response(::GameCharacterServiceResponseWrapper* value);
  ::GameCharacterServiceResponseWrapper* unsafe_arena_release_gamecharacter_service_response();

  private:
  const ::GameCharacterServiceResponseWrapper& _internal_gamecharacter_service_response() const;
  ::GameCharacterServiceResponseWrapper* _internal_mutable_gamecharacter_service_response();

  public:
  void clear_service_response();
  ServiceResponseCase service_response_case() const;
  // @@protoc_insertion_point(class_scope:DatabaseResponseWrapper)
 private:
  class _Internal;
  void set_has_account_service_response();
  void set_has_gamecharacter_service_response();

  inline bool has_service_response() const;
  inline void clear_has_service_response();

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 3, 2,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::uint32_t session_id_;
    union ServiceResponseUnion {
      constexpr ServiceResponseUnion() : _constinit_{} {}
        ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::AccountServiceResponseWrapper* account_service_response_;
      ::GameCharacterServiceResponseWrapper* gamecharacter_service_response_;
    } service_response_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];

    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_DatabaseProtocol_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// DatabaseRequestWrapper

// uint32 session_id = 1;
inline void DatabaseRequestWrapper::clear_session_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.session_id_ = 0u;
}
inline ::uint32_t DatabaseRequestWrapper::session_id() const {
  // @@protoc_insertion_point(field_get:DatabaseRequestWrapper.session_id)
  return _internal_session_id();
}
inline void DatabaseRequestWrapper::set_session_id(::uint32_t value) {
  _internal_set_session_id(value);
  // @@protoc_insertion_point(field_set:DatabaseRequestWrapper.session_id)
}
inline ::uint32_t DatabaseRequestWrapper::_internal_session_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.session_id_;
}
inline void DatabaseRequestWrapper::_internal_set_session_id(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.session_id_ = value;
}

// .AccountServiceRequestWrapper account_service_request = 2;
inline bool DatabaseRequestWrapper::has_account_service_request() const {
  return service_request_case() == kAccountServiceRequest;
}
inline bool DatabaseRequestWrapper::_internal_has_account_service_request() const {
  return service_request_case() == kAccountServiceRequest;
}
inline void DatabaseRequestWrapper::set_has_account_service_request() {
  _impl_._oneof_case_[0] = kAccountServiceRequest;
}
inline ::AccountServiceRequestWrapper* DatabaseRequestWrapper::release_account_service_request() {
  // @@protoc_insertion_point(field_release:DatabaseRequestWrapper.account_service_request)
  if (service_request_case() == kAccountServiceRequest) {
    clear_has_service_request();
    auto* temp = _impl_.service_request_.account_service_request_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.service_request_.account_service_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::AccountServiceRequestWrapper& DatabaseRequestWrapper::_internal_account_service_request() const {
  return service_request_case() == kAccountServiceRequest ? *_impl_.service_request_.account_service_request_ : reinterpret_cast<::AccountServiceRequestWrapper&>(::_AccountServiceRequestWrapper_default_instance_);
}
inline const ::AccountServiceRequestWrapper& DatabaseRequestWrapper::account_service_request() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:DatabaseRequestWrapper.account_service_request)
  return _internal_account_service_request();
}
inline ::AccountServiceRequestWrapper* DatabaseRequestWrapper::unsafe_arena_release_account_service_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:DatabaseRequestWrapper.account_service_request)
  if (service_request_case() == kAccountServiceRequest) {
    clear_has_service_request();
    auto* temp = _impl_.service_request_.account_service_request_;
    _impl_.service_request_.account_service_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void DatabaseRequestWrapper::unsafe_arena_set_allocated_account_service_request(::AccountServiceRequestWrapper* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_service_request();
  if (value) {
    set_has_account_service_request();
    _impl_.service_request_.account_service_request_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DatabaseRequestWrapper.account_service_request)
}
inline ::AccountServiceRequestWrapper* DatabaseRequestWrapper::_internal_mutable_account_service_request() {
  if (service_request_case() != kAccountServiceRequest) {
    clear_service_request();
    set_has_account_service_request();
    _impl_.service_request_.account_service_request_ = CreateMaybeMessage<::AccountServiceRequestWrapper>(GetArena());
  }
  return _impl_.service_request_.account_service_request_;
}
inline ::AccountServiceRequestWrapper* DatabaseRequestWrapper::mutable_account_service_request() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::AccountServiceRequestWrapper* _msg = _internal_mutable_account_service_request();
  // @@protoc_insertion_point(field_mutable:DatabaseRequestWrapper.account_service_request)
  return _msg;
}

// .GameCharacterServiceRequestWrapper gamecharacter_service_request = 3;
inline bool DatabaseRequestWrapper::has_gamecharacter_service_request() const {
  return service_request_case() == kGamecharacterServiceRequest;
}
inline bool DatabaseRequestWrapper::_internal_has_gamecharacter_service_request() const {
  return service_request_case() == kGamecharacterServiceRequest;
}
inline void DatabaseRequestWrapper::set_has_gamecharacter_service_request() {
  _impl_._oneof_case_[0] = kGamecharacterServiceRequest;
}
inline ::GameCharacterServiceRequestWrapper* DatabaseRequestWrapper::release_gamecharacter_service_request() {
  // @@protoc_insertion_point(field_release:DatabaseRequestWrapper.gamecharacter_service_request)
  if (service_request_case() == kGamecharacterServiceRequest) {
    clear_has_service_request();
    auto* temp = _impl_.service_request_.gamecharacter_service_request_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.service_request_.gamecharacter_service_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::GameCharacterServiceRequestWrapper& DatabaseRequestWrapper::_internal_gamecharacter_service_request() const {
  return service_request_case() == kGamecharacterServiceRequest ? *_impl_.service_request_.gamecharacter_service_request_ : reinterpret_cast<::GameCharacterServiceRequestWrapper&>(::_GameCharacterServiceRequestWrapper_default_instance_);
}
inline const ::GameCharacterServiceRequestWrapper& DatabaseRequestWrapper::gamecharacter_service_request() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:DatabaseRequestWrapper.gamecharacter_service_request)
  return _internal_gamecharacter_service_request();
}
inline ::GameCharacterServiceRequestWrapper* DatabaseRequestWrapper::unsafe_arena_release_gamecharacter_service_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:DatabaseRequestWrapper.gamecharacter_service_request)
  if (service_request_case() == kGamecharacterServiceRequest) {
    clear_has_service_request();
    auto* temp = _impl_.service_request_.gamecharacter_service_request_;
    _impl_.service_request_.gamecharacter_service_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void DatabaseRequestWrapper::unsafe_arena_set_allocated_gamecharacter_service_request(::GameCharacterServiceRequestWrapper* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_service_request();
  if (value) {
    set_has_gamecharacter_service_request();
    _impl_.service_request_.gamecharacter_service_request_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DatabaseRequestWrapper.gamecharacter_service_request)
}
inline ::GameCharacterServiceRequestWrapper* DatabaseRequestWrapper::_internal_mutable_gamecharacter_service_request() {
  if (service_request_case() != kGamecharacterServiceRequest) {
    clear_service_request();
    set_has_gamecharacter_service_request();
    _impl_.service_request_.gamecharacter_service_request_ = CreateMaybeMessage<::GameCharacterServiceRequestWrapper>(GetArena());
  }
  return _impl_.service_request_.gamecharacter_service_request_;
}
inline ::GameCharacterServiceRequestWrapper* DatabaseRequestWrapper::mutable_gamecharacter_service_request() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::GameCharacterServiceRequestWrapper* _msg = _internal_mutable_gamecharacter_service_request();
  // @@protoc_insertion_point(field_mutable:DatabaseRequestWrapper.gamecharacter_service_request)
  return _msg;
}

inline bool DatabaseRequestWrapper::has_service_request() const {
  return service_request_case() != SERVICE_REQUEST_NOT_SET;
}
inline void DatabaseRequestWrapper::clear_has_service_request() {
  _impl_._oneof_case_[0] = SERVICE_REQUEST_NOT_SET;
}
inline DatabaseRequestWrapper::ServiceRequestCase DatabaseRequestWrapper::service_request_case() const {
  return DatabaseRequestWrapper::ServiceRequestCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// DatabaseResponseWrapper

// uint32 session_id = 1;
inline void DatabaseResponseWrapper::clear_session_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.session_id_ = 0u;
}
inline ::uint32_t DatabaseResponseWrapper::session_id() const {
  // @@protoc_insertion_point(field_get:DatabaseResponseWrapper.session_id)
  return _internal_session_id();
}
inline void DatabaseResponseWrapper::set_session_id(::uint32_t value) {
  _internal_set_session_id(value);
  // @@protoc_insertion_point(field_set:DatabaseResponseWrapper.session_id)
}
inline ::uint32_t DatabaseResponseWrapper::_internal_session_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.session_id_;
}
inline void DatabaseResponseWrapper::_internal_set_session_id(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.session_id_ = value;
}

// .AccountServiceResponseWrapper account_service_response = 2;
inline bool DatabaseResponseWrapper::has_account_service_response() const {
  return service_response_case() == kAccountServiceResponse;
}
inline bool DatabaseResponseWrapper::_internal_has_account_service_response() const {
  return service_response_case() == kAccountServiceResponse;
}
inline void DatabaseResponseWrapper::set_has_account_service_response() {
  _impl_._oneof_case_[0] = kAccountServiceResponse;
}
inline ::AccountServiceResponseWrapper* DatabaseResponseWrapper::release_account_service_response() {
  // @@protoc_insertion_point(field_release:DatabaseResponseWrapper.account_service_response)
  if (service_response_case() == kAccountServiceResponse) {
    clear_has_service_response();
    auto* temp = _impl_.service_response_.account_service_response_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.service_response_.account_service_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::AccountServiceResponseWrapper& DatabaseResponseWrapper::_internal_account_service_response() const {
  return service_response_case() == kAccountServiceResponse ? *_impl_.service_response_.account_service_response_ : reinterpret_cast<::AccountServiceResponseWrapper&>(::_AccountServiceResponseWrapper_default_instance_);
}
inline const ::AccountServiceResponseWrapper& DatabaseResponseWrapper::account_service_response() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:DatabaseResponseWrapper.account_service_response)
  return _internal_account_service_response();
}
inline ::AccountServiceResponseWrapper* DatabaseResponseWrapper::unsafe_arena_release_account_service_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:DatabaseResponseWrapper.account_service_response)
  if (service_response_case() == kAccountServiceResponse) {
    clear_has_service_response();
    auto* temp = _impl_.service_response_.account_service_response_;
    _impl_.service_response_.account_service_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void DatabaseResponseWrapper::unsafe_arena_set_allocated_account_service_response(::AccountServiceResponseWrapper* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_service_response();
  if (value) {
    set_has_account_service_response();
    _impl_.service_response_.account_service_response_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DatabaseResponseWrapper.account_service_response)
}
inline ::AccountServiceResponseWrapper* DatabaseResponseWrapper::_internal_mutable_account_service_response() {
  if (service_response_case() != kAccountServiceResponse) {
    clear_service_response();
    set_has_account_service_response();
    _impl_.service_response_.account_service_response_ = CreateMaybeMessage<::AccountServiceResponseWrapper>(GetArena());
  }
  return _impl_.service_response_.account_service_response_;
}
inline ::AccountServiceResponseWrapper* DatabaseResponseWrapper::mutable_account_service_response() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::AccountServiceResponseWrapper* _msg = _internal_mutable_account_service_response();
  // @@protoc_insertion_point(field_mutable:DatabaseResponseWrapper.account_service_response)
  return _msg;
}

// .GameCharacterServiceResponseWrapper gamecharacter_service_response = 3;
inline bool DatabaseResponseWrapper::has_gamecharacter_service_response() const {
  return service_response_case() == kGamecharacterServiceResponse;
}
inline bool DatabaseResponseWrapper::_internal_has_gamecharacter_service_response() const {
  return service_response_case() == kGamecharacterServiceResponse;
}
inline void DatabaseResponseWrapper::set_has_gamecharacter_service_response() {
  _impl_._oneof_case_[0] = kGamecharacterServiceResponse;
}
inline ::GameCharacterServiceResponseWrapper* DatabaseResponseWrapper::release_gamecharacter_service_response() {
  // @@protoc_insertion_point(field_release:DatabaseResponseWrapper.gamecharacter_service_response)
  if (service_response_case() == kGamecharacterServiceResponse) {
    clear_has_service_response();
    auto* temp = _impl_.service_response_.gamecharacter_service_response_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.service_response_.gamecharacter_service_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::GameCharacterServiceResponseWrapper& DatabaseResponseWrapper::_internal_gamecharacter_service_response() const {
  return service_response_case() == kGamecharacterServiceResponse ? *_impl_.service_response_.gamecharacter_service_response_ : reinterpret_cast<::GameCharacterServiceResponseWrapper&>(::_GameCharacterServiceResponseWrapper_default_instance_);
}
inline const ::GameCharacterServiceResponseWrapper& DatabaseResponseWrapper::gamecharacter_service_response() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:DatabaseResponseWrapper.gamecharacter_service_response)
  return _internal_gamecharacter_service_response();
}
inline ::GameCharacterServiceResponseWrapper* DatabaseResponseWrapper::unsafe_arena_release_gamecharacter_service_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:DatabaseResponseWrapper.gamecharacter_service_response)
  if (service_response_case() == kGamecharacterServiceResponse) {
    clear_has_service_response();
    auto* temp = _impl_.service_response_.gamecharacter_service_response_;
    _impl_.service_response_.gamecharacter_service_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void DatabaseResponseWrapper::unsafe_arena_set_allocated_gamecharacter_service_response(::GameCharacterServiceResponseWrapper* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_service_response();
  if (value) {
    set_has_gamecharacter_service_response();
    _impl_.service_response_.gamecharacter_service_response_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DatabaseResponseWrapper.gamecharacter_service_response)
}
inline ::GameCharacterServiceResponseWrapper* DatabaseResponseWrapper::_internal_mutable_gamecharacter_service_response() {
  if (service_response_case() != kGamecharacterServiceResponse) {
    clear_service_response();
    set_has_gamecharacter_service_response();
    _impl_.service_response_.gamecharacter_service_response_ = CreateMaybeMessage<::GameCharacterServiceResponseWrapper>(GetArena());
  }
  return _impl_.service_response_.gamecharacter_service_response_;
}
inline ::GameCharacterServiceResponseWrapper* DatabaseResponseWrapper::mutable_gamecharacter_service_response() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::GameCharacterServiceResponseWrapper* _msg = _internal_mutable_gamecharacter_service_response();
  // @@protoc_insertion_point(field_mutable:DatabaseResponseWrapper.gamecharacter_service_response)
  return _msg;
}

inline bool DatabaseResponseWrapper::has_service_response() const {
  return service_response_case() != SERVICE_RESPONSE_NOT_SET;
}
inline void DatabaseResponseWrapper::clear_has_service_response() {
  _impl_._oneof_case_[0] = SERVICE_RESPONSE_NOT_SET;
}
inline DatabaseResponseWrapper::ServiceResponseCase DatabaseResponseWrapper::service_response_case() const {
  return DatabaseResponseWrapper::ServiceResponseCase(_impl_._oneof_case_[0]);
}
#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_DatabaseProtocol_2eproto_2epb_2eh
