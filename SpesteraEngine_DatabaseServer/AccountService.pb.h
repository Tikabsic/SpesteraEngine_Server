// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: AccountService.proto
// Protobuf C++ Version: 4.25.1

#ifndef GOOGLE_PROTOBUF_INCLUDED_AccountService_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_AccountService_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4025001 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_AccountService_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_AccountService_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_AccountService_2eproto;
class AccountServiceRequestWrapper;
struct AccountServiceRequestWrapperDefaultTypeInternal;
extern AccountServiceRequestWrapperDefaultTypeInternal _AccountServiceRequestWrapper_default_instance_;
class AccountServiceResponseWrapper;
struct AccountServiceResponseWrapperDefaultTypeInternal;
extern AccountServiceResponseWrapperDefaultTypeInternal _AccountServiceResponseWrapper_default_instance_;
class CharacterBaseData;
struct CharacterBaseDataDefaultTypeInternal;
extern CharacterBaseDataDefaultTypeInternal _CharacterBaseData_default_instance_;
class RequestAccountData;
struct RequestAccountDataDefaultTypeInternal;
extern RequestAccountDataDefaultTypeInternal _RequestAccountData_default_instance_;
class RequestCharacterList;
struct RequestCharacterListDefaultTypeInternal;
extern RequestCharacterListDefaultTypeInternal _RequestCharacterList_default_instance_;
class ResponseAccountData;
struct ResponseAccountDataDefaultTypeInternal;
extern ResponseAccountDataDefaultTypeInternal _ResponseAccountData_default_instance_;
class ResponseCharacterList;
struct ResponseCharacterListDefaultTypeInternal;
extern ResponseCharacterListDefaultTypeInternal _ResponseCharacterList_default_instance_;
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google


// ===================================================================


// -------------------------------------------------------------------

class ResponseAccountData final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ResponseAccountData) */ {
 public:
  inline ResponseAccountData() : ResponseAccountData(nullptr) {}
  ~ResponseAccountData() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ResponseAccountData(::google::protobuf::internal::ConstantInitialized);

  inline ResponseAccountData(const ResponseAccountData& from)
      : ResponseAccountData(nullptr, from) {}
  ResponseAccountData(ResponseAccountData&& from) noexcept
    : ResponseAccountData() {
    *this = ::std::move(from);
  }

  inline ResponseAccountData& operator=(const ResponseAccountData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResponseAccountData& operator=(ResponseAccountData&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResponseAccountData& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResponseAccountData* internal_default_instance() {
    return reinterpret_cast<const ResponseAccountData*>(
               &_ResponseAccountData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ResponseAccountData& a, ResponseAccountData& b) {
    a.Swap(&b);
  }
  inline void Swap(ResponseAccountData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResponseAccountData* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResponseAccountData* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ResponseAccountData>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ResponseAccountData& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ResponseAccountData& from) {
    ResponseAccountData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ResponseAccountData* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ResponseAccountData";
  }
  protected:
  explicit ResponseAccountData(::google::protobuf::Arena* arena);
  ResponseAccountData(::google::protobuf::Arena* arena, const ResponseAccountData& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountIdFieldNumber = 1,
    kAccountNameFieldNumber = 2,
    kAccountPasswordFieldNumber = 3,
    kAccountPasswordToVerifyFieldNumber = 4,
  };
  // string account_id = 1;
  void clear_account_id() ;
  const std::string& account_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_account_id(Arg_&& arg, Args_... args);
  std::string* mutable_account_id();
  PROTOBUF_NODISCARD std::string* release_account_id();
  void set_allocated_account_id(std::string* value);

  private:
  const std::string& _internal_account_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_account_id(
      const std::string& value);
  std::string* _internal_mutable_account_id();

  public:
  // string account_name = 2;
  void clear_account_name() ;
  const std::string& account_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_account_name(Arg_&& arg, Args_... args);
  std::string* mutable_account_name();
  PROTOBUF_NODISCARD std::string* release_account_name();
  void set_allocated_account_name(std::string* value);

  private:
  const std::string& _internal_account_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_account_name(
      const std::string& value);
  std::string* _internal_mutable_account_name();

  public:
  // string account_password = 3;
  void clear_account_password() ;
  const std::string& account_password() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_account_password(Arg_&& arg, Args_... args);
  std::string* mutable_account_password();
  PROTOBUF_NODISCARD std::string* release_account_password();
  void set_allocated_account_password(std::string* value);

  private:
  const std::string& _internal_account_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_account_password(
      const std::string& value);
  std::string* _internal_mutable_account_password();

  public:
  // string account_password_to_verify = 4;
  void clear_account_password_to_verify() ;
  const std::string& account_password_to_verify() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_account_password_to_verify(Arg_&& arg, Args_... args);
  std::string* mutable_account_password_to_verify();
  PROTOBUF_NODISCARD std::string* release_account_password_to_verify();
  void set_allocated_account_password_to_verify(std::string* value);

  private:
  const std::string& _internal_account_password_to_verify() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_account_password_to_verify(
      const std::string& value);
  std::string* _internal_mutable_account_password_to_verify();

  public:
  // @@protoc_insertion_point(class_scope:ResponseAccountData)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 0,
      92, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr account_id_;
    ::google::protobuf::internal::ArenaStringPtr account_name_;
    ::google::protobuf::internal::ArenaStringPtr account_password_;
    ::google::protobuf::internal::ArenaStringPtr account_password_to_verify_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_AccountService_2eproto;
};// -------------------------------------------------------------------

class RequestCharacterList final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:RequestCharacterList) */ {
 public:
  inline RequestCharacterList() : RequestCharacterList(nullptr) {}
  ~RequestCharacterList() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR RequestCharacterList(::google::protobuf::internal::ConstantInitialized);

  inline RequestCharacterList(const RequestCharacterList& from)
      : RequestCharacterList(nullptr, from) {}
  RequestCharacterList(RequestCharacterList&& from) noexcept
    : RequestCharacterList() {
    *this = ::std::move(from);
  }

  inline RequestCharacterList& operator=(const RequestCharacterList& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestCharacterList& operator=(RequestCharacterList&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RequestCharacterList& default_instance() {
    return *internal_default_instance();
  }
  static inline const RequestCharacterList* internal_default_instance() {
    return reinterpret_cast<const RequestCharacterList*>(
               &_RequestCharacterList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(RequestCharacterList& a, RequestCharacterList& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestCharacterList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestCharacterList* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RequestCharacterList* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RequestCharacterList>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const RequestCharacterList& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const RequestCharacterList& from) {
    RequestCharacterList::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(RequestCharacterList* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "RequestCharacterList";
  }
  protected:
  explicit RequestCharacterList(::google::protobuf::Arena* arena);
  RequestCharacterList(::google::protobuf::Arena* arena, const RequestCharacterList& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountNameFieldNumber = 1,
  };
  // string account_name = 1;
  void clear_account_name() ;
  const std::string& account_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_account_name(Arg_&& arg, Args_... args);
  std::string* mutable_account_name();
  PROTOBUF_NODISCARD std::string* release_account_name();
  void set_allocated_account_name(std::string* value);

  private:
  const std::string& _internal_account_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_account_name(
      const std::string& value);
  std::string* _internal_mutable_account_name();

  public:
  // @@protoc_insertion_point(class_scope:RequestCharacterList)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      41, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr account_name_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_AccountService_2eproto;
};// -------------------------------------------------------------------

class RequestAccountData final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:RequestAccountData) */ {
 public:
  inline RequestAccountData() : RequestAccountData(nullptr) {}
  ~RequestAccountData() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR RequestAccountData(::google::protobuf::internal::ConstantInitialized);

  inline RequestAccountData(const RequestAccountData& from)
      : RequestAccountData(nullptr, from) {}
  RequestAccountData(RequestAccountData&& from) noexcept
    : RequestAccountData() {
    *this = ::std::move(from);
  }

  inline RequestAccountData& operator=(const RequestAccountData& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestAccountData& operator=(RequestAccountData&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RequestAccountData& default_instance() {
    return *internal_default_instance();
  }
  static inline const RequestAccountData* internal_default_instance() {
    return reinterpret_cast<const RequestAccountData*>(
               &_RequestAccountData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(RequestAccountData& a, RequestAccountData& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestAccountData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestAccountData* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RequestAccountData* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RequestAccountData>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const RequestAccountData& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const RequestAccountData& from) {
    RequestAccountData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(RequestAccountData* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "RequestAccountData";
  }
  protected:
  explicit RequestAccountData(::google::protobuf::Arena* arena);
  RequestAccountData(::google::protobuf::Arena* arena, const RequestAccountData& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountNameFieldNumber = 1,
    kAccountPasswordToVerifyFieldNumber = 2,
  };
  // string account_name = 1;
  void clear_account_name() ;
  const std::string& account_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_account_name(Arg_&& arg, Args_... args);
  std::string* mutable_account_name();
  PROTOBUF_NODISCARD std::string* release_account_name();
  void set_allocated_account_name(std::string* value);

  private:
  const std::string& _internal_account_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_account_name(
      const std::string& value);
  std::string* _internal_mutable_account_name();

  public:
  // string account_password_to_verify = 2;
  void clear_account_password_to_verify() ;
  const std::string& account_password_to_verify() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_account_password_to_verify(Arg_&& arg, Args_... args);
  std::string* mutable_account_password_to_verify();
  PROTOBUF_NODISCARD std::string* release_account_password_to_verify();
  void set_allocated_account_password_to_verify(std::string* value);

  private:
  const std::string& _internal_account_password_to_verify() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_account_password_to_verify(
      const std::string& value);
  std::string* _internal_mutable_account_password_to_verify();

  public:
  // @@protoc_insertion_point(class_scope:RequestAccountData)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      65, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr account_name_;
    ::google::protobuf::internal::ArenaStringPtr account_password_to_verify_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_AccountService_2eproto;
};// -------------------------------------------------------------------

class CharacterBaseData final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CharacterBaseData) */ {
 public:
  inline CharacterBaseData() : CharacterBaseData(nullptr) {}
  ~CharacterBaseData() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR CharacterBaseData(::google::protobuf::internal::ConstantInitialized);

  inline CharacterBaseData(const CharacterBaseData& from)
      : CharacterBaseData(nullptr, from) {}
  CharacterBaseData(CharacterBaseData&& from) noexcept
    : CharacterBaseData() {
    *this = ::std::move(from);
  }

  inline CharacterBaseData& operator=(const CharacterBaseData& from) {
    CopyFrom(from);
    return *this;
  }
  inline CharacterBaseData& operator=(CharacterBaseData&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CharacterBaseData& default_instance() {
    return *internal_default_instance();
  }
  static inline const CharacterBaseData* internal_default_instance() {
    return reinterpret_cast<const CharacterBaseData*>(
               &_CharacterBaseData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CharacterBaseData& a, CharacterBaseData& b) {
    a.Swap(&b);
  }
  inline void Swap(CharacterBaseData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CharacterBaseData* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CharacterBaseData* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CharacterBaseData>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CharacterBaseData& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const CharacterBaseData& from) {
    CharacterBaseData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(CharacterBaseData* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "CharacterBaseData";
  }
  protected:
  explicit CharacterBaseData(::google::protobuf::Arena* arena);
  CharacterBaseData(::google::protobuf::Arena* arena, const CharacterBaseData& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCharacterNameFieldNumber = 2,
    kSlotNumberFieldNumber = 1,
  };
  // string character_name = 2;
  void clear_character_name() ;
  const std::string& character_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_character_name(Arg_&& arg, Args_... args);
  std::string* mutable_character_name();
  PROTOBUF_NODISCARD std::string* release_character_name();
  void set_allocated_character_name(std::string* value);

  private:
  const std::string& _internal_character_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_character_name(
      const std::string& value);
  std::string* _internal_mutable_character_name();

  public:
  // uint32 slot_number = 1;
  void clear_slot_number() ;
  ::uint32_t slot_number() const;
  void set_slot_number(::uint32_t value);

  private:
  ::uint32_t _internal_slot_number() const;
  void _internal_set_slot_number(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:CharacterBaseData)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      40, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr character_name_;
    ::uint32_t slot_number_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_AccountService_2eproto;
};// -------------------------------------------------------------------

class ResponseCharacterList final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ResponseCharacterList) */ {
 public:
  inline ResponseCharacterList() : ResponseCharacterList(nullptr) {}
  ~ResponseCharacterList() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ResponseCharacterList(::google::protobuf::internal::ConstantInitialized);

  inline ResponseCharacterList(const ResponseCharacterList& from)
      : ResponseCharacterList(nullptr, from) {}
  ResponseCharacterList(ResponseCharacterList&& from) noexcept
    : ResponseCharacterList() {
    *this = ::std::move(from);
  }

  inline ResponseCharacterList& operator=(const ResponseCharacterList& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResponseCharacterList& operator=(ResponseCharacterList&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResponseCharacterList& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResponseCharacterList* internal_default_instance() {
    return reinterpret_cast<const ResponseCharacterList*>(
               &_ResponseCharacterList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ResponseCharacterList& a, ResponseCharacterList& b) {
    a.Swap(&b);
  }
  inline void Swap(ResponseCharacterList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResponseCharacterList* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResponseCharacterList* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ResponseCharacterList>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ResponseCharacterList& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ResponseCharacterList& from) {
    ResponseCharacterList::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ResponseCharacterList* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ResponseCharacterList";
  }
  protected:
  explicit ResponseCharacterList(::google::protobuf::Arena* arena);
  ResponseCharacterList(::google::protobuf::Arena* arena, const ResponseCharacterList& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCharactersFieldNumber = 1,
  };
  // repeated .CharacterBaseData characters = 1;
  int characters_size() const;
  private:
  int _internal_characters_size() const;

  public:
  void clear_characters() ;
  ::CharacterBaseData* mutable_characters(int index);
  ::google::protobuf::RepeatedPtrField< ::CharacterBaseData >*
      mutable_characters();
  private:
  const ::google::protobuf::RepeatedPtrField<::CharacterBaseData>& _internal_characters() const;
  ::google::protobuf::RepeatedPtrField<::CharacterBaseData>* _internal_mutable_characters();
  public:
  const ::CharacterBaseData& characters(int index) const;
  ::CharacterBaseData* add_characters();
  const ::google::protobuf::RepeatedPtrField< ::CharacterBaseData >&
      characters() const;
  // @@protoc_insertion_point(class_scope:ResponseCharacterList)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField< ::CharacterBaseData > characters_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_AccountService_2eproto;
};// -------------------------------------------------------------------

class AccountServiceRequestWrapper final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AccountServiceRequestWrapper) */ {
 public:
  inline AccountServiceRequestWrapper() : AccountServiceRequestWrapper(nullptr) {}
  ~AccountServiceRequestWrapper() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR AccountServiceRequestWrapper(::google::protobuf::internal::ConstantInitialized);

  inline AccountServiceRequestWrapper(const AccountServiceRequestWrapper& from)
      : AccountServiceRequestWrapper(nullptr, from) {}
  AccountServiceRequestWrapper(AccountServiceRequestWrapper&& from) noexcept
    : AccountServiceRequestWrapper() {
    *this = ::std::move(from);
  }

  inline AccountServiceRequestWrapper& operator=(const AccountServiceRequestWrapper& from) {
    CopyFrom(from);
    return *this;
  }
  inline AccountServiceRequestWrapper& operator=(AccountServiceRequestWrapper&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AccountServiceRequestWrapper& default_instance() {
    return *internal_default_instance();
  }
  enum RequestCase {
    kRequestAccountData = 2,
    kRequestCharacterList = 3,
    REQUEST_NOT_SET = 0,
  };

  static inline const AccountServiceRequestWrapper* internal_default_instance() {
    return reinterpret_cast<const AccountServiceRequestWrapper*>(
               &_AccountServiceRequestWrapper_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AccountServiceRequestWrapper& a, AccountServiceRequestWrapper& b) {
    a.Swap(&b);
  }
  inline void Swap(AccountServiceRequestWrapper* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AccountServiceRequestWrapper* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AccountServiceRequestWrapper* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AccountServiceRequestWrapper>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AccountServiceRequestWrapper& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const AccountServiceRequestWrapper& from) {
    AccountServiceRequestWrapper::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(AccountServiceRequestWrapper* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "AccountServiceRequestWrapper";
  }
  protected:
  explicit AccountServiceRequestWrapper(::google::protobuf::Arena* arena);
  AccountServiceRequestWrapper(::google::protobuf::Arena* arena, const AccountServiceRequestWrapper& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestAccountDataFieldNumber = 2,
    kRequestCharacterListFieldNumber = 3,
  };
  // .RequestAccountData request_account_data = 2;
  bool has_request_account_data() const;
  private:
  bool _internal_has_request_account_data() const;

  public:
  void clear_request_account_data() ;
  const ::RequestAccountData& request_account_data() const;
  PROTOBUF_NODISCARD ::RequestAccountData* release_request_account_data();
  ::RequestAccountData* mutable_request_account_data();
  void set_allocated_request_account_data(::RequestAccountData* value);
  void unsafe_arena_set_allocated_request_account_data(::RequestAccountData* value);
  ::RequestAccountData* unsafe_arena_release_request_account_data();

  private:
  const ::RequestAccountData& _internal_request_account_data() const;
  ::RequestAccountData* _internal_mutable_request_account_data();

  public:
  // .RequestCharacterList request_character_list = 3;
  bool has_request_character_list() const;
  private:
  bool _internal_has_request_character_list() const;

  public:
  void clear_request_character_list() ;
  const ::RequestCharacterList& request_character_list() const;
  PROTOBUF_NODISCARD ::RequestCharacterList* release_request_character_list();
  ::RequestCharacterList* mutable_request_character_list();
  void set_allocated_request_character_list(::RequestCharacterList* value);
  void unsafe_arena_set_allocated_request_character_list(::RequestCharacterList* value);
  ::RequestCharacterList* unsafe_arena_release_request_character_list();

  private:
  const ::RequestCharacterList& _internal_request_character_list() const;
  ::RequestCharacterList* _internal_mutable_request_character_list();

  public:
  void clear_request();
  RequestCase request_case() const;
  // @@protoc_insertion_point(class_scope:AccountServiceRequestWrapper)
 private:
  class _Internal;
  void set_has_request_account_data();
  void set_has_request_character_list();

  inline bool has_request() const;
  inline void clear_has_request();

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 2, 2,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    union RequestUnion {
      constexpr RequestUnion() : _constinit_{} {}
        ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::RequestAccountData* request_account_data_;
      ::RequestCharacterList* request_character_list_;
    } request_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];

    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_AccountService_2eproto;
};// -------------------------------------------------------------------

class AccountServiceResponseWrapper final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AccountServiceResponseWrapper) */ {
 public:
  inline AccountServiceResponseWrapper() : AccountServiceResponseWrapper(nullptr) {}
  ~AccountServiceResponseWrapper() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR AccountServiceResponseWrapper(::google::protobuf::internal::ConstantInitialized);

  inline AccountServiceResponseWrapper(const AccountServiceResponseWrapper& from)
      : AccountServiceResponseWrapper(nullptr, from) {}
  AccountServiceResponseWrapper(AccountServiceResponseWrapper&& from) noexcept
    : AccountServiceResponseWrapper() {
    *this = ::std::move(from);
  }

  inline AccountServiceResponseWrapper& operator=(const AccountServiceResponseWrapper& from) {
    CopyFrom(from);
    return *this;
  }
  inline AccountServiceResponseWrapper& operator=(AccountServiceResponseWrapper&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AccountServiceResponseWrapper& default_instance() {
    return *internal_default_instance();
  }
  enum ResponseCase {
    kResponseAccountData = 2,
    kResponseCharacterList = 3,
    RESPONSE_NOT_SET = 0,
  };

  static inline const AccountServiceResponseWrapper* internal_default_instance() {
    return reinterpret_cast<const AccountServiceResponseWrapper*>(
               &_AccountServiceResponseWrapper_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(AccountServiceResponseWrapper& a, AccountServiceResponseWrapper& b) {
    a.Swap(&b);
  }
  inline void Swap(AccountServiceResponseWrapper* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AccountServiceResponseWrapper* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AccountServiceResponseWrapper* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AccountServiceResponseWrapper>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AccountServiceResponseWrapper& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const AccountServiceResponseWrapper& from) {
    AccountServiceResponseWrapper::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(AccountServiceResponseWrapper* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "AccountServiceResponseWrapper";
  }
  protected:
  explicit AccountServiceResponseWrapper(::google::protobuf::Arena* arena);
  AccountServiceResponseWrapper(::google::protobuf::Arena* arena, const AccountServiceResponseWrapper& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResponseAccountDataFieldNumber = 2,
    kResponseCharacterListFieldNumber = 3,
  };
  // .ResponseAccountData response_account_data = 2;
  bool has_response_account_data() const;
  private:
  bool _internal_has_response_account_data() const;

  public:
  void clear_response_account_data() ;
  const ::ResponseAccountData& response_account_data() const;
  PROTOBUF_NODISCARD ::ResponseAccountData* release_response_account_data();
  ::ResponseAccountData* mutable_response_account_data();
  void set_allocated_response_account_data(::ResponseAccountData* value);
  void unsafe_arena_set_allocated_response_account_data(::ResponseAccountData* value);
  ::ResponseAccountData* unsafe_arena_release_response_account_data();

  private:
  const ::ResponseAccountData& _internal_response_account_data() const;
  ::ResponseAccountData* _internal_mutable_response_account_data();

  public:
  // .ResponseCharacterList response_character_list = 3;
  bool has_response_character_list() const;
  private:
  bool _internal_has_response_character_list() const;

  public:
  void clear_response_character_list() ;
  const ::ResponseCharacterList& response_character_list() const;
  PROTOBUF_NODISCARD ::ResponseCharacterList* release_response_character_list();
  ::ResponseCharacterList* mutable_response_character_list();
  void set_allocated_response_character_list(::ResponseCharacterList* value);
  void unsafe_arena_set_allocated_response_character_list(::ResponseCharacterList* value);
  ::ResponseCharacterList* unsafe_arena_release_response_character_list();

  private:
  const ::ResponseCharacterList& _internal_response_character_list() const;
  ::ResponseCharacterList* _internal_mutable_response_character_list();

  public:
  void clear_response();
  ResponseCase response_case() const;
  // @@protoc_insertion_point(class_scope:AccountServiceResponseWrapper)
 private:
  class _Internal;
  void set_has_response_account_data();
  void set_has_response_character_list();

  inline bool has_response() const;
  inline void clear_has_response();

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 2, 2,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    union ResponseUnion {
      constexpr ResponseUnion() : _constinit_{} {}
        ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::ResponseAccountData* response_account_data_;
      ::ResponseCharacterList* response_character_list_;
    } response_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];

    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_AccountService_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// AccountServiceRequestWrapper

// .RequestAccountData request_account_data = 2;
inline bool AccountServiceRequestWrapper::has_request_account_data() const {
  return request_case() == kRequestAccountData;
}
inline bool AccountServiceRequestWrapper::_internal_has_request_account_data() const {
  return request_case() == kRequestAccountData;
}
inline void AccountServiceRequestWrapper::set_has_request_account_data() {
  _impl_._oneof_case_[0] = kRequestAccountData;
}
inline void AccountServiceRequestWrapper::clear_request_account_data() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (request_case() == kRequestAccountData) {
    if (GetArena() == nullptr) {
      delete _impl_.request_.request_account_data_;
    }
    clear_has_request();
  }
}
inline ::RequestAccountData* AccountServiceRequestWrapper::release_request_account_data() {
  // @@protoc_insertion_point(field_release:AccountServiceRequestWrapper.request_account_data)
  if (request_case() == kRequestAccountData) {
    clear_has_request();
    auto* temp = _impl_.request_.request_account_data_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.request_.request_account_data_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::RequestAccountData& AccountServiceRequestWrapper::_internal_request_account_data() const {
  return request_case() == kRequestAccountData ? *_impl_.request_.request_account_data_ : reinterpret_cast<::RequestAccountData&>(::_RequestAccountData_default_instance_);
}
inline const ::RequestAccountData& AccountServiceRequestWrapper::request_account_data() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:AccountServiceRequestWrapper.request_account_data)
  return _internal_request_account_data();
}
inline ::RequestAccountData* AccountServiceRequestWrapper::unsafe_arena_release_request_account_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:AccountServiceRequestWrapper.request_account_data)
  if (request_case() == kRequestAccountData) {
    clear_has_request();
    auto* temp = _impl_.request_.request_account_data_;
    _impl_.request_.request_account_data_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AccountServiceRequestWrapper::unsafe_arena_set_allocated_request_account_data(::RequestAccountData* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_request();
  if (value) {
    set_has_request_account_data();
    _impl_.request_.request_account_data_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AccountServiceRequestWrapper.request_account_data)
}
inline ::RequestAccountData* AccountServiceRequestWrapper::_internal_mutable_request_account_data() {
  if (request_case() != kRequestAccountData) {
    clear_request();
    set_has_request_account_data();
    _impl_.request_.request_account_data_ = CreateMaybeMessage<::RequestAccountData>(GetArena());
  }
  return _impl_.request_.request_account_data_;
}
inline ::RequestAccountData* AccountServiceRequestWrapper::mutable_request_account_data() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::RequestAccountData* _msg = _internal_mutable_request_account_data();
  // @@protoc_insertion_point(field_mutable:AccountServiceRequestWrapper.request_account_data)
  return _msg;
}

// .RequestCharacterList request_character_list = 3;
inline bool AccountServiceRequestWrapper::has_request_character_list() const {
  return request_case() == kRequestCharacterList;
}
inline bool AccountServiceRequestWrapper::_internal_has_request_character_list() const {
  return request_case() == kRequestCharacterList;
}
inline void AccountServiceRequestWrapper::set_has_request_character_list() {
  _impl_._oneof_case_[0] = kRequestCharacterList;
}
inline void AccountServiceRequestWrapper::clear_request_character_list() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (request_case() == kRequestCharacterList) {
    if (GetArena() == nullptr) {
      delete _impl_.request_.request_character_list_;
    }
    clear_has_request();
  }
}
inline ::RequestCharacterList* AccountServiceRequestWrapper::release_request_character_list() {
  // @@protoc_insertion_point(field_release:AccountServiceRequestWrapper.request_character_list)
  if (request_case() == kRequestCharacterList) {
    clear_has_request();
    auto* temp = _impl_.request_.request_character_list_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.request_.request_character_list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::RequestCharacterList& AccountServiceRequestWrapper::_internal_request_character_list() const {
  return request_case() == kRequestCharacterList ? *_impl_.request_.request_character_list_ : reinterpret_cast<::RequestCharacterList&>(::_RequestCharacterList_default_instance_);
}
inline const ::RequestCharacterList& AccountServiceRequestWrapper::request_character_list() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:AccountServiceRequestWrapper.request_character_list)
  return _internal_request_character_list();
}
inline ::RequestCharacterList* AccountServiceRequestWrapper::unsafe_arena_release_request_character_list() {
  // @@protoc_insertion_point(field_unsafe_arena_release:AccountServiceRequestWrapper.request_character_list)
  if (request_case() == kRequestCharacterList) {
    clear_has_request();
    auto* temp = _impl_.request_.request_character_list_;
    _impl_.request_.request_character_list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AccountServiceRequestWrapper::unsafe_arena_set_allocated_request_character_list(::RequestCharacterList* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_request();
  if (value) {
    set_has_request_character_list();
    _impl_.request_.request_character_list_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AccountServiceRequestWrapper.request_character_list)
}
inline ::RequestCharacterList* AccountServiceRequestWrapper::_internal_mutable_request_character_list() {
  if (request_case() != kRequestCharacterList) {
    clear_request();
    set_has_request_character_list();
    _impl_.request_.request_character_list_ = CreateMaybeMessage<::RequestCharacterList>(GetArena());
  }
  return _impl_.request_.request_character_list_;
}
inline ::RequestCharacterList* AccountServiceRequestWrapper::mutable_request_character_list() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::RequestCharacterList* _msg = _internal_mutable_request_character_list();
  // @@protoc_insertion_point(field_mutable:AccountServiceRequestWrapper.request_character_list)
  return _msg;
}

inline bool AccountServiceRequestWrapper::has_request() const {
  return request_case() != REQUEST_NOT_SET;
}
inline void AccountServiceRequestWrapper::clear_has_request() {
  _impl_._oneof_case_[0] = REQUEST_NOT_SET;
}
inline AccountServiceRequestWrapper::RequestCase AccountServiceRequestWrapper::request_case() const {
  return AccountServiceRequestWrapper::RequestCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// AccountServiceResponseWrapper

// .ResponseAccountData response_account_data = 2;
inline bool AccountServiceResponseWrapper::has_response_account_data() const {
  return response_case() == kResponseAccountData;
}
inline bool AccountServiceResponseWrapper::_internal_has_response_account_data() const {
  return response_case() == kResponseAccountData;
}
inline void AccountServiceResponseWrapper::set_has_response_account_data() {
  _impl_._oneof_case_[0] = kResponseAccountData;
}
inline void AccountServiceResponseWrapper::clear_response_account_data() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (response_case() == kResponseAccountData) {
    if (GetArena() == nullptr) {
      delete _impl_.response_.response_account_data_;
    }
    clear_has_response();
  }
}
inline ::ResponseAccountData* AccountServiceResponseWrapper::release_response_account_data() {
  // @@protoc_insertion_point(field_release:AccountServiceResponseWrapper.response_account_data)
  if (response_case() == kResponseAccountData) {
    clear_has_response();
    auto* temp = _impl_.response_.response_account_data_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.response_.response_account_data_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ResponseAccountData& AccountServiceResponseWrapper::_internal_response_account_data() const {
  return response_case() == kResponseAccountData ? *_impl_.response_.response_account_data_ : reinterpret_cast<::ResponseAccountData&>(::_ResponseAccountData_default_instance_);
}
inline const ::ResponseAccountData& AccountServiceResponseWrapper::response_account_data() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:AccountServiceResponseWrapper.response_account_data)
  return _internal_response_account_data();
}
inline ::ResponseAccountData* AccountServiceResponseWrapper::unsafe_arena_release_response_account_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:AccountServiceResponseWrapper.response_account_data)
  if (response_case() == kResponseAccountData) {
    clear_has_response();
    auto* temp = _impl_.response_.response_account_data_;
    _impl_.response_.response_account_data_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AccountServiceResponseWrapper::unsafe_arena_set_allocated_response_account_data(::ResponseAccountData* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_response();
  if (value) {
    set_has_response_account_data();
    _impl_.response_.response_account_data_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AccountServiceResponseWrapper.response_account_data)
}
inline ::ResponseAccountData* AccountServiceResponseWrapper::_internal_mutable_response_account_data() {
  if (response_case() != kResponseAccountData) {
    clear_response();
    set_has_response_account_data();
    _impl_.response_.response_account_data_ = CreateMaybeMessage<::ResponseAccountData>(GetArena());
  }
  return _impl_.response_.response_account_data_;
}
inline ::ResponseAccountData* AccountServiceResponseWrapper::mutable_response_account_data() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::ResponseAccountData* _msg = _internal_mutable_response_account_data();
  // @@protoc_insertion_point(field_mutable:AccountServiceResponseWrapper.response_account_data)
  return _msg;
}

// .ResponseCharacterList response_character_list = 3;
inline bool AccountServiceResponseWrapper::has_response_character_list() const {
  return response_case() == kResponseCharacterList;
}
inline bool AccountServiceResponseWrapper::_internal_has_response_character_list() const {
  return response_case() == kResponseCharacterList;
}
inline void AccountServiceResponseWrapper::set_has_response_character_list() {
  _impl_._oneof_case_[0] = kResponseCharacterList;
}
inline void AccountServiceResponseWrapper::clear_response_character_list() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (response_case() == kResponseCharacterList) {
    if (GetArena() == nullptr) {
      delete _impl_.response_.response_character_list_;
    }
    clear_has_response();
  }
}
inline ::ResponseCharacterList* AccountServiceResponseWrapper::release_response_character_list() {
  // @@protoc_insertion_point(field_release:AccountServiceResponseWrapper.response_character_list)
  if (response_case() == kResponseCharacterList) {
    clear_has_response();
    auto* temp = _impl_.response_.response_character_list_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.response_.response_character_list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ResponseCharacterList& AccountServiceResponseWrapper::_internal_response_character_list() const {
  return response_case() == kResponseCharacterList ? *_impl_.response_.response_character_list_ : reinterpret_cast<::ResponseCharacterList&>(::_ResponseCharacterList_default_instance_);
}
inline const ::ResponseCharacterList& AccountServiceResponseWrapper::response_character_list() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:AccountServiceResponseWrapper.response_character_list)
  return _internal_response_character_list();
}
inline ::ResponseCharacterList* AccountServiceResponseWrapper::unsafe_arena_release_response_character_list() {
  // @@protoc_insertion_point(field_unsafe_arena_release:AccountServiceResponseWrapper.response_character_list)
  if (response_case() == kResponseCharacterList) {
    clear_has_response();
    auto* temp = _impl_.response_.response_character_list_;
    _impl_.response_.response_character_list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AccountServiceResponseWrapper::unsafe_arena_set_allocated_response_character_list(::ResponseCharacterList* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_response();
  if (value) {
    set_has_response_character_list();
    _impl_.response_.response_character_list_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AccountServiceResponseWrapper.response_character_list)
}
inline ::ResponseCharacterList* AccountServiceResponseWrapper::_internal_mutable_response_character_list() {
  if (response_case() != kResponseCharacterList) {
    clear_response();
    set_has_response_character_list();
    _impl_.response_.response_character_list_ = CreateMaybeMessage<::ResponseCharacterList>(GetArena());
  }
  return _impl_.response_.response_character_list_;
}
inline ::ResponseCharacterList* AccountServiceResponseWrapper::mutable_response_character_list() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::ResponseCharacterList* _msg = _internal_mutable_response_character_list();
  // @@protoc_insertion_point(field_mutable:AccountServiceResponseWrapper.response_character_list)
  return _msg;
}

inline bool AccountServiceResponseWrapper::has_response() const {
  return response_case() != RESPONSE_NOT_SET;
}
inline void AccountServiceResponseWrapper::clear_has_response() {
  _impl_._oneof_case_[0] = RESPONSE_NOT_SET;
}
inline AccountServiceResponseWrapper::ResponseCase AccountServiceResponseWrapper::response_case() const {
  return AccountServiceResponseWrapper::ResponseCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// RequestAccountData

// string account_name = 1;
inline void RequestAccountData::clear_account_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.account_name_.ClearToEmpty();
}
inline const std::string& RequestAccountData::account_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:RequestAccountData.account_name)
  return _internal_account_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RequestAccountData::set_account_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.account_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:RequestAccountData.account_name)
}
inline std::string* RequestAccountData::mutable_account_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_account_name();
  // @@protoc_insertion_point(field_mutable:RequestAccountData.account_name)
  return _s;
}
inline const std::string& RequestAccountData::_internal_account_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.account_name_.Get();
}
inline void RequestAccountData::_internal_set_account_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.account_name_.Set(value, GetArena());
}
inline std::string* RequestAccountData::_internal_mutable_account_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.account_name_.Mutable( GetArena());
}
inline std::string* RequestAccountData::release_account_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:RequestAccountData.account_name)
  return _impl_.account_name_.Release();
}
inline void RequestAccountData::set_allocated_account_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.account_name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.account_name_.IsDefault()) {
          _impl_.account_name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:RequestAccountData.account_name)
}

// string account_password_to_verify = 2;
inline void RequestAccountData::clear_account_password_to_verify() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.account_password_to_verify_.ClearToEmpty();
}
inline const std::string& RequestAccountData::account_password_to_verify() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:RequestAccountData.account_password_to_verify)
  return _internal_account_password_to_verify();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RequestAccountData::set_account_password_to_verify(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.account_password_to_verify_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:RequestAccountData.account_password_to_verify)
}
inline std::string* RequestAccountData::mutable_account_password_to_verify() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_account_password_to_verify();
  // @@protoc_insertion_point(field_mutable:RequestAccountData.account_password_to_verify)
  return _s;
}
inline const std::string& RequestAccountData::_internal_account_password_to_verify() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.account_password_to_verify_.Get();
}
inline void RequestAccountData::_internal_set_account_password_to_verify(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.account_password_to_verify_.Set(value, GetArena());
}
inline std::string* RequestAccountData::_internal_mutable_account_password_to_verify() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.account_password_to_verify_.Mutable( GetArena());
}
inline std::string* RequestAccountData::release_account_password_to_verify() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:RequestAccountData.account_password_to_verify)
  return _impl_.account_password_to_verify_.Release();
}
inline void RequestAccountData::set_allocated_account_password_to_verify(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.account_password_to_verify_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.account_password_to_verify_.IsDefault()) {
          _impl_.account_password_to_verify_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:RequestAccountData.account_password_to_verify)
}

// -------------------------------------------------------------------

// ResponseAccountData

// string account_id = 1;
inline void ResponseAccountData::clear_account_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.account_id_.ClearToEmpty();
}
inline const std::string& ResponseAccountData::account_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ResponseAccountData.account_id)
  return _internal_account_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ResponseAccountData::set_account_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.account_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ResponseAccountData.account_id)
}
inline std::string* ResponseAccountData::mutable_account_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_account_id();
  // @@protoc_insertion_point(field_mutable:ResponseAccountData.account_id)
  return _s;
}
inline const std::string& ResponseAccountData::_internal_account_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.account_id_.Get();
}
inline void ResponseAccountData::_internal_set_account_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.account_id_.Set(value, GetArena());
}
inline std::string* ResponseAccountData::_internal_mutable_account_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.account_id_.Mutable( GetArena());
}
inline std::string* ResponseAccountData::release_account_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ResponseAccountData.account_id)
  return _impl_.account_id_.Release();
}
inline void ResponseAccountData::set_allocated_account_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.account_id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.account_id_.IsDefault()) {
          _impl_.account_id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ResponseAccountData.account_id)
}

// string account_name = 2;
inline void ResponseAccountData::clear_account_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.account_name_.ClearToEmpty();
}
inline const std::string& ResponseAccountData::account_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ResponseAccountData.account_name)
  return _internal_account_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ResponseAccountData::set_account_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.account_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ResponseAccountData.account_name)
}
inline std::string* ResponseAccountData::mutable_account_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_account_name();
  // @@protoc_insertion_point(field_mutable:ResponseAccountData.account_name)
  return _s;
}
inline const std::string& ResponseAccountData::_internal_account_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.account_name_.Get();
}
inline void ResponseAccountData::_internal_set_account_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.account_name_.Set(value, GetArena());
}
inline std::string* ResponseAccountData::_internal_mutable_account_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.account_name_.Mutable( GetArena());
}
inline std::string* ResponseAccountData::release_account_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ResponseAccountData.account_name)
  return _impl_.account_name_.Release();
}
inline void ResponseAccountData::set_allocated_account_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.account_name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.account_name_.IsDefault()) {
          _impl_.account_name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ResponseAccountData.account_name)
}

// string account_password = 3;
inline void ResponseAccountData::clear_account_password() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.account_password_.ClearToEmpty();
}
inline const std::string& ResponseAccountData::account_password() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ResponseAccountData.account_password)
  return _internal_account_password();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ResponseAccountData::set_account_password(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.account_password_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ResponseAccountData.account_password)
}
inline std::string* ResponseAccountData::mutable_account_password() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_account_password();
  // @@protoc_insertion_point(field_mutable:ResponseAccountData.account_password)
  return _s;
}
inline const std::string& ResponseAccountData::_internal_account_password() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.account_password_.Get();
}
inline void ResponseAccountData::_internal_set_account_password(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.account_password_.Set(value, GetArena());
}
inline std::string* ResponseAccountData::_internal_mutable_account_password() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.account_password_.Mutable( GetArena());
}
inline std::string* ResponseAccountData::release_account_password() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ResponseAccountData.account_password)
  return _impl_.account_password_.Release();
}
inline void ResponseAccountData::set_allocated_account_password(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.account_password_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.account_password_.IsDefault()) {
          _impl_.account_password_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ResponseAccountData.account_password)
}

// string account_password_to_verify = 4;
inline void ResponseAccountData::clear_account_password_to_verify() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.account_password_to_verify_.ClearToEmpty();
}
inline const std::string& ResponseAccountData::account_password_to_verify() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ResponseAccountData.account_password_to_verify)
  return _internal_account_password_to_verify();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ResponseAccountData::set_account_password_to_verify(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.account_password_to_verify_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ResponseAccountData.account_password_to_verify)
}
inline std::string* ResponseAccountData::mutable_account_password_to_verify() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_account_password_to_verify();
  // @@protoc_insertion_point(field_mutable:ResponseAccountData.account_password_to_verify)
  return _s;
}
inline const std::string& ResponseAccountData::_internal_account_password_to_verify() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.account_password_to_verify_.Get();
}
inline void ResponseAccountData::_internal_set_account_password_to_verify(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.account_password_to_verify_.Set(value, GetArena());
}
inline std::string* ResponseAccountData::_internal_mutable_account_password_to_verify() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.account_password_to_verify_.Mutable( GetArena());
}
inline std::string* ResponseAccountData::release_account_password_to_verify() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ResponseAccountData.account_password_to_verify)
  return _impl_.account_password_to_verify_.Release();
}
inline void ResponseAccountData::set_allocated_account_password_to_verify(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.account_password_to_verify_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.account_password_to_verify_.IsDefault()) {
          _impl_.account_password_to_verify_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ResponseAccountData.account_password_to_verify)
}

// -------------------------------------------------------------------

// RequestCharacterList

// string account_name = 1;
inline void RequestCharacterList::clear_account_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.account_name_.ClearToEmpty();
}
inline const std::string& RequestCharacterList::account_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:RequestCharacterList.account_name)
  return _internal_account_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RequestCharacterList::set_account_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.account_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:RequestCharacterList.account_name)
}
inline std::string* RequestCharacterList::mutable_account_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_account_name();
  // @@protoc_insertion_point(field_mutable:RequestCharacterList.account_name)
  return _s;
}
inline const std::string& RequestCharacterList::_internal_account_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.account_name_.Get();
}
inline void RequestCharacterList::_internal_set_account_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.account_name_.Set(value, GetArena());
}
inline std::string* RequestCharacterList::_internal_mutable_account_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.account_name_.Mutable( GetArena());
}
inline std::string* RequestCharacterList::release_account_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:RequestCharacterList.account_name)
  return _impl_.account_name_.Release();
}
inline void RequestCharacterList::set_allocated_account_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.account_name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.account_name_.IsDefault()) {
          _impl_.account_name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:RequestCharacterList.account_name)
}

// -------------------------------------------------------------------

// CharacterBaseData

// uint32 slot_number = 1;
inline void CharacterBaseData::clear_slot_number() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.slot_number_ = 0u;
}
inline ::uint32_t CharacterBaseData::slot_number() const {
  // @@protoc_insertion_point(field_get:CharacterBaseData.slot_number)
  return _internal_slot_number();
}
inline void CharacterBaseData::set_slot_number(::uint32_t value) {
  _internal_set_slot_number(value);
  // @@protoc_insertion_point(field_set:CharacterBaseData.slot_number)
}
inline ::uint32_t CharacterBaseData::_internal_slot_number() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.slot_number_;
}
inline void CharacterBaseData::_internal_set_slot_number(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.slot_number_ = value;
}

// string character_name = 2;
inline void CharacterBaseData::clear_character_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.character_name_.ClearToEmpty();
}
inline const std::string& CharacterBaseData::character_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:CharacterBaseData.character_name)
  return _internal_character_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CharacterBaseData::set_character_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.character_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:CharacterBaseData.character_name)
}
inline std::string* CharacterBaseData::mutable_character_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_character_name();
  // @@protoc_insertion_point(field_mutable:CharacterBaseData.character_name)
  return _s;
}
inline const std::string& CharacterBaseData::_internal_character_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.character_name_.Get();
}
inline void CharacterBaseData::_internal_set_character_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.character_name_.Set(value, GetArena());
}
inline std::string* CharacterBaseData::_internal_mutable_character_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.character_name_.Mutable( GetArena());
}
inline std::string* CharacterBaseData::release_character_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:CharacterBaseData.character_name)
  return _impl_.character_name_.Release();
}
inline void CharacterBaseData::set_allocated_character_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.character_name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.character_name_.IsDefault()) {
          _impl_.character_name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CharacterBaseData.character_name)
}

// -------------------------------------------------------------------

// ResponseCharacterList

// repeated .CharacterBaseData characters = 1;
inline int ResponseCharacterList::_internal_characters_size() const {
  return _internal_characters().size();
}
inline int ResponseCharacterList::characters_size() const {
  return _internal_characters_size();
}
inline void ResponseCharacterList::clear_characters() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.characters_.Clear();
}
inline ::CharacterBaseData* ResponseCharacterList::mutable_characters(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:ResponseCharacterList.characters)
  return _internal_mutable_characters()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::CharacterBaseData>* ResponseCharacterList::mutable_characters()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:ResponseCharacterList.characters)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_characters();
}
inline const ::CharacterBaseData& ResponseCharacterList::characters(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ResponseCharacterList.characters)
  return _internal_characters().Get(index);
}
inline ::CharacterBaseData* ResponseCharacterList::add_characters() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::CharacterBaseData* _add = _internal_mutable_characters()->Add();
  // @@protoc_insertion_point(field_add:ResponseCharacterList.characters)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::CharacterBaseData>& ResponseCharacterList::characters() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:ResponseCharacterList.characters)
  return _internal_characters();
}
inline const ::google::protobuf::RepeatedPtrField<::CharacterBaseData>&
ResponseCharacterList::_internal_characters() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.characters_;
}
inline ::google::protobuf::RepeatedPtrField<::CharacterBaseData>*
ResponseCharacterList::_internal_mutable_characters() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.characters_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_AccountService_2eproto_2epb_2eh
