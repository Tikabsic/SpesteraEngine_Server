// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DatabaseProtocol.proto

#include "DatabaseProtocol.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;

inline constexpr DatabaseRequestWrapper::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : session_id_{0u},
        service_request_{},
        _cached_size_{0},
        _oneof_case_{} {}

template <typename>
PROTOBUF_CONSTEXPR DatabaseRequestWrapper::DatabaseRequestWrapper(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct DatabaseRequestWrapperDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DatabaseRequestWrapperDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DatabaseRequestWrapperDefaultTypeInternal() {}
  union {
    DatabaseRequestWrapper _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DatabaseRequestWrapperDefaultTypeInternal _DatabaseRequestWrapper_default_instance_;

inline constexpr DatabaseResponseWrapper::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : session_id_{0u},
        service_response_{},
        _cached_size_{0},
        _oneof_case_{} {}

template <typename>
PROTOBUF_CONSTEXPR DatabaseResponseWrapper::DatabaseResponseWrapper(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct DatabaseResponseWrapperDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DatabaseResponseWrapperDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DatabaseResponseWrapperDefaultTypeInternal() {}
  union {
    DatabaseResponseWrapper _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DatabaseResponseWrapperDefaultTypeInternal _DatabaseResponseWrapper_default_instance_;
static ::_pb::Metadata file_level_metadata_DatabaseProtocol_2eproto[2];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_DatabaseProtocol_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_DatabaseProtocol_2eproto = nullptr;
const ::uint32_t TableStruct_DatabaseProtocol_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::DatabaseRequestWrapper, _internal_metadata_),
    ~0u,  // no _extensions_
    PROTOBUF_FIELD_OFFSET(::DatabaseRequestWrapper, _impl_._oneof_case_[0]),
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::DatabaseRequestWrapper, _impl_.session_id_),
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    PROTOBUF_FIELD_OFFSET(::DatabaseRequestWrapper, _impl_.service_request_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::DatabaseResponseWrapper, _internal_metadata_),
    ~0u,  // no _extensions_
    PROTOBUF_FIELD_OFFSET(::DatabaseResponseWrapper, _impl_._oneof_case_[0]),
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::DatabaseResponseWrapper, _impl_.session_id_),
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    PROTOBUF_FIELD_OFFSET(::DatabaseResponseWrapper, _impl_.service_response_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::DatabaseRequestWrapper)},
        {12, -1, -1, sizeof(::DatabaseResponseWrapper)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::_DatabaseRequestWrapper_default_instance_._instance,
    &::_DatabaseResponseWrapper_default_instance_._instance,
};
const char descriptor_table_protodef_DatabaseProtocol_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\026DatabaseProtocol.proto\032\024AccountService"
    ".proto\032\032GameCharacterService.proto\"\317\001\n\026D"
    "atabaseRequestWrapper\022\022\n\nsession_id\030\001 \001("
    "\r\022@\n\027account_service_request\030\002 \001(\0132\035.Acc"
    "ountServiceRequestWrapperH\000\022L\n\035gamechara"
    "cter_service_request\030\003 \001(\0132#.GameCharact"
    "erServiceRequestWrapperH\000B\021\n\017service_req"
    "uest\"\325\001\n\027DatabaseResponseWrapper\022\022\n\nsess"
    "ion_id\030\001 \001(\r\022B\n\030account_service_response"
    "\030\002 \001(\0132\036.AccountServiceResponseWrapperH\000"
    "\022N\n\036gamecharacter_service_response\030\003 \001(\013"
    "2$.GameCharacterServiceResponseWrapperH\000"
    "B\022\n\020service_responseb\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_DatabaseProtocol_2eproto_deps[2] =
    {
        &::descriptor_table_AccountService_2eproto,
        &::descriptor_table_GameCharacterService_2eproto,
};
static ::absl::once_flag descriptor_table_DatabaseProtocol_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_DatabaseProtocol_2eproto = {
    false,
    false,
    508,
    descriptor_table_protodef_DatabaseProtocol_2eproto,
    "DatabaseProtocol.proto",
    &descriptor_table_DatabaseProtocol_2eproto_once,
    descriptor_table_DatabaseProtocol_2eproto_deps,
    2,
    2,
    schemas,
    file_default_instances,
    TableStruct_DatabaseProtocol_2eproto::offsets,
    file_level_metadata_DatabaseProtocol_2eproto,
    file_level_enum_descriptors_DatabaseProtocol_2eproto,
    file_level_service_descriptors_DatabaseProtocol_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_DatabaseProtocol_2eproto_getter() {
  return &descriptor_table_DatabaseProtocol_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_DatabaseProtocol_2eproto(&descriptor_table_DatabaseProtocol_2eproto);
// ===================================================================

class DatabaseRequestWrapper::_Internal {
 public:
  static constexpr ::int32_t kOneofCaseOffset =
    PROTOBUF_FIELD_OFFSET(::DatabaseRequestWrapper, _impl_._oneof_case_);
  static const ::AccountServiceRequestWrapper& account_service_request(const DatabaseRequestWrapper* msg);
  static const ::GameCharacterServiceRequestWrapper& gamecharacter_service_request(const DatabaseRequestWrapper* msg);
};

const ::AccountServiceRequestWrapper& DatabaseRequestWrapper::_Internal::account_service_request(const DatabaseRequestWrapper* msg) {
  return *msg->_impl_.service_request_.account_service_request_;
}
const ::GameCharacterServiceRequestWrapper& DatabaseRequestWrapper::_Internal::gamecharacter_service_request(const DatabaseRequestWrapper* msg) {
  return *msg->_impl_.service_request_.gamecharacter_service_request_;
}
void DatabaseRequestWrapper::set_allocated_account_service_request(::AccountServiceRequestWrapper* account_service_request) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_service_request();
  if (account_service_request) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(account_service_request)->GetArena();
    if (message_arena != submessage_arena) {
      account_service_request = ::google::protobuf::internal::GetOwnedMessage(message_arena, account_service_request, submessage_arena);
    }
    set_has_account_service_request();
    _impl_.service_request_.account_service_request_ = account_service_request;
  }
  // @@protoc_insertion_point(field_set_allocated:DatabaseRequestWrapper.account_service_request)
}
void DatabaseRequestWrapper::clear_account_service_request() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (service_request_case() == kAccountServiceRequest) {
    if (GetArena() == nullptr) {
      delete _impl_.service_request_.account_service_request_;
    }
    clear_has_service_request();
  }
}
void DatabaseRequestWrapper::set_allocated_gamecharacter_service_request(::GameCharacterServiceRequestWrapper* gamecharacter_service_request) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_service_request();
  if (gamecharacter_service_request) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(gamecharacter_service_request)->GetArena();
    if (message_arena != submessage_arena) {
      gamecharacter_service_request = ::google::protobuf::internal::GetOwnedMessage(message_arena, gamecharacter_service_request, submessage_arena);
    }
    set_has_gamecharacter_service_request();
    _impl_.service_request_.gamecharacter_service_request_ = gamecharacter_service_request;
  }
  // @@protoc_insertion_point(field_set_allocated:DatabaseRequestWrapper.gamecharacter_service_request)
}
void DatabaseRequestWrapper::clear_gamecharacter_service_request() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (service_request_case() == kGamecharacterServiceRequest) {
    if (GetArena() == nullptr) {
      delete _impl_.service_request_.gamecharacter_service_request_;
    }
    clear_has_service_request();
  }
}
DatabaseRequestWrapper::DatabaseRequestWrapper(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:DatabaseRequestWrapper)
}
inline PROTOBUF_NDEBUG_INLINE DatabaseRequestWrapper::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : service_request_{},
        _cached_size_{0},
        _oneof_case_{from._oneof_case_[0]} {}

DatabaseRequestWrapper::DatabaseRequestWrapper(
    ::google::protobuf::Arena* arena,
    const DatabaseRequestWrapper& from)
    : ::google::protobuf::Message(arena) {
  DatabaseRequestWrapper* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  _impl_.session_id_ = from._impl_.session_id_;
  switch (service_request_case()) {
    case SERVICE_REQUEST_NOT_SET:
      break;
      case kAccountServiceRequest:
        _impl_.service_request_.account_service_request_ = CreateMaybeMessage<::AccountServiceRequestWrapper>(arena, *from._impl_.service_request_.account_service_request_);
        break;
      case kGamecharacterServiceRequest:
        _impl_.service_request_.gamecharacter_service_request_ = CreateMaybeMessage<::GameCharacterServiceRequestWrapper>(arena, *from._impl_.service_request_.gamecharacter_service_request_);
        break;
  }

  // @@protoc_insertion_point(copy_constructor:DatabaseRequestWrapper)
}
inline PROTOBUF_NDEBUG_INLINE DatabaseRequestWrapper::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : service_request_{},
        _cached_size_{0},
        _oneof_case_{} {}

inline void DatabaseRequestWrapper::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.session_id_ = {};
}
DatabaseRequestWrapper::~DatabaseRequestWrapper() {
  // @@protoc_insertion_point(destructor:DatabaseRequestWrapper)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void DatabaseRequestWrapper::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  if (has_service_request()) {
    clear_service_request();
  }
  _impl_.~Impl_();
}

void DatabaseRequestWrapper::clear_service_request() {
// @@protoc_insertion_point(one_of_clear_start:DatabaseRequestWrapper)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  switch (service_request_case()) {
    case kAccountServiceRequest: {
      if (GetArena() == nullptr) {
        delete _impl_.service_request_.account_service_request_;
      }
      break;
    }
    case kGamecharacterServiceRequest: {
      if (GetArena() == nullptr) {
        delete _impl_.service_request_.gamecharacter_service_request_;
      }
      break;
    }
    case SERVICE_REQUEST_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = SERVICE_REQUEST_NOT_SET;
}


PROTOBUF_NOINLINE void DatabaseRequestWrapper::Clear() {
// @@protoc_insertion_point(message_clear_start:DatabaseRequestWrapper)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.session_id_ = 0u;
  clear_service_request();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* DatabaseRequestWrapper::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 3, 2, 0, 2> DatabaseRequestWrapper::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_DatabaseRequestWrapper_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // uint32 session_id = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(DatabaseRequestWrapper, _impl_.session_id_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(DatabaseRequestWrapper, _impl_.session_id_)}},
  }}, {{
    65535, 65535
  }}, {{
    // uint32 session_id = 1;
    {PROTOBUF_FIELD_OFFSET(DatabaseRequestWrapper, _impl_.session_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // .AccountServiceRequestWrapper account_service_request = 2;
    {PROTOBUF_FIELD_OFFSET(DatabaseRequestWrapper, _impl_.service_request_.account_service_request_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .GameCharacterServiceRequestWrapper gamecharacter_service_request = 3;
    {PROTOBUF_FIELD_OFFSET(DatabaseRequestWrapper, _impl_.service_request_.gamecharacter_service_request_), _Internal::kOneofCaseOffset + 0, 1,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::AccountServiceRequestWrapper>()},
    {::_pbi::TcParser::GetTable<::GameCharacterServiceRequestWrapper>()},
  }}, {{
  }},
};

::uint8_t* DatabaseRequestWrapper::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DatabaseRequestWrapper)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // uint32 session_id = 1;
  if (this->_internal_session_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_session_id(), target);
  }

  switch (service_request_case()) {
    case kAccountServiceRequest: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          2, _Internal::account_service_request(this),
          _Internal::account_service_request(this).GetCachedSize(), target, stream);
      break;
    }
    case kGamecharacterServiceRequest: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          3, _Internal::gamecharacter_service_request(this),
          _Internal::gamecharacter_service_request(this).GetCachedSize(), target, stream);
      break;
    }
    default:
      break;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DatabaseRequestWrapper)
  return target;
}

::size_t DatabaseRequestWrapper::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DatabaseRequestWrapper)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 session_id = 1;
  if (this->_internal_session_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_session_id());
  }

  switch (service_request_case()) {
    // .AccountServiceRequestWrapper account_service_request = 2;
    case kAccountServiceRequest: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.service_request_.account_service_request_);
      break;
    }
    // .GameCharacterServiceRequestWrapper gamecharacter_service_request = 3;
    case kGamecharacterServiceRequest: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.service_request_.gamecharacter_service_request_);
      break;
    }
    case SERVICE_REQUEST_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData DatabaseRequestWrapper::_class_data_ = {
    DatabaseRequestWrapper::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* DatabaseRequestWrapper::GetClassData() const {
  return &_class_data_;
}

void DatabaseRequestWrapper::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<DatabaseRequestWrapper*>(&to_msg);
  auto& from = static_cast<const DatabaseRequestWrapper&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:DatabaseRequestWrapper)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_session_id() != 0) {
    _this->_internal_set_session_id(from._internal_session_id());
  }
  switch (from.service_request_case()) {
    case kAccountServiceRequest: {
      _this->_internal_mutable_account_service_request()->::AccountServiceRequestWrapper::MergeFrom(
          from._internal_account_service_request());
      break;
    }
    case kGamecharacterServiceRequest: {
      _this->_internal_mutable_gamecharacter_service_request()->::GameCharacterServiceRequestWrapper::MergeFrom(
          from._internal_gamecharacter_service_request());
      break;
    }
    case SERVICE_REQUEST_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void DatabaseRequestWrapper::CopyFrom(const DatabaseRequestWrapper& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DatabaseRequestWrapper)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool DatabaseRequestWrapper::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* DatabaseRequestWrapper::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void DatabaseRequestWrapper::InternalSwap(DatabaseRequestWrapper* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
        swap(_impl_.session_id_, other->_impl_.session_id_);
  swap(_impl_.service_request_, other->_impl_.service_request_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::google::protobuf::Metadata DatabaseRequestWrapper::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_DatabaseProtocol_2eproto_getter, &descriptor_table_DatabaseProtocol_2eproto_once,
      file_level_metadata_DatabaseProtocol_2eproto[0]);
}
// ===================================================================

class DatabaseResponseWrapper::_Internal {
 public:
  static constexpr ::int32_t kOneofCaseOffset =
    PROTOBUF_FIELD_OFFSET(::DatabaseResponseWrapper, _impl_._oneof_case_);
  static const ::AccountServiceResponseWrapper& account_service_response(const DatabaseResponseWrapper* msg);
  static const ::GameCharacterServiceResponseWrapper& gamecharacter_service_response(const DatabaseResponseWrapper* msg);
};

const ::AccountServiceResponseWrapper& DatabaseResponseWrapper::_Internal::account_service_response(const DatabaseResponseWrapper* msg) {
  return *msg->_impl_.service_response_.account_service_response_;
}
const ::GameCharacterServiceResponseWrapper& DatabaseResponseWrapper::_Internal::gamecharacter_service_response(const DatabaseResponseWrapper* msg) {
  return *msg->_impl_.service_response_.gamecharacter_service_response_;
}
void DatabaseResponseWrapper::set_allocated_account_service_response(::AccountServiceResponseWrapper* account_service_response) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_service_response();
  if (account_service_response) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(account_service_response)->GetArena();
    if (message_arena != submessage_arena) {
      account_service_response = ::google::protobuf::internal::GetOwnedMessage(message_arena, account_service_response, submessage_arena);
    }
    set_has_account_service_response();
    _impl_.service_response_.account_service_response_ = account_service_response;
  }
  // @@protoc_insertion_point(field_set_allocated:DatabaseResponseWrapper.account_service_response)
}
void DatabaseResponseWrapper::clear_account_service_response() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (service_response_case() == kAccountServiceResponse) {
    if (GetArena() == nullptr) {
      delete _impl_.service_response_.account_service_response_;
    }
    clear_has_service_response();
  }
}
void DatabaseResponseWrapper::set_allocated_gamecharacter_service_response(::GameCharacterServiceResponseWrapper* gamecharacter_service_response) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_service_response();
  if (gamecharacter_service_response) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(gamecharacter_service_response)->GetArena();
    if (message_arena != submessage_arena) {
      gamecharacter_service_response = ::google::protobuf::internal::GetOwnedMessage(message_arena, gamecharacter_service_response, submessage_arena);
    }
    set_has_gamecharacter_service_response();
    _impl_.service_response_.gamecharacter_service_response_ = gamecharacter_service_response;
  }
  // @@protoc_insertion_point(field_set_allocated:DatabaseResponseWrapper.gamecharacter_service_response)
}
void DatabaseResponseWrapper::clear_gamecharacter_service_response() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (service_response_case() == kGamecharacterServiceResponse) {
    if (GetArena() == nullptr) {
      delete _impl_.service_response_.gamecharacter_service_response_;
    }
    clear_has_service_response();
  }
}
DatabaseResponseWrapper::DatabaseResponseWrapper(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:DatabaseResponseWrapper)
}
inline PROTOBUF_NDEBUG_INLINE DatabaseResponseWrapper::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : service_response_{},
        _cached_size_{0},
        _oneof_case_{from._oneof_case_[0]} {}

DatabaseResponseWrapper::DatabaseResponseWrapper(
    ::google::protobuf::Arena* arena,
    const DatabaseResponseWrapper& from)
    : ::google::protobuf::Message(arena) {
  DatabaseResponseWrapper* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  _impl_.session_id_ = from._impl_.session_id_;
  switch (service_response_case()) {
    case SERVICE_RESPONSE_NOT_SET:
      break;
      case kAccountServiceResponse:
        _impl_.service_response_.account_service_response_ = CreateMaybeMessage<::AccountServiceResponseWrapper>(arena, *from._impl_.service_response_.account_service_response_);
        break;
      case kGamecharacterServiceResponse:
        _impl_.service_response_.gamecharacter_service_response_ = CreateMaybeMessage<::GameCharacterServiceResponseWrapper>(arena, *from._impl_.service_response_.gamecharacter_service_response_);
        break;
  }

  // @@protoc_insertion_point(copy_constructor:DatabaseResponseWrapper)
}
inline PROTOBUF_NDEBUG_INLINE DatabaseResponseWrapper::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : service_response_{},
        _cached_size_{0},
        _oneof_case_{} {}

inline void DatabaseResponseWrapper::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.session_id_ = {};
}
DatabaseResponseWrapper::~DatabaseResponseWrapper() {
  // @@protoc_insertion_point(destructor:DatabaseResponseWrapper)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void DatabaseResponseWrapper::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  if (has_service_response()) {
    clear_service_response();
  }
  _impl_.~Impl_();
}

void DatabaseResponseWrapper::clear_service_response() {
// @@protoc_insertion_point(one_of_clear_start:DatabaseResponseWrapper)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  switch (service_response_case()) {
    case kAccountServiceResponse: {
      if (GetArena() == nullptr) {
        delete _impl_.service_response_.account_service_response_;
      }
      break;
    }
    case kGamecharacterServiceResponse: {
      if (GetArena() == nullptr) {
        delete _impl_.service_response_.gamecharacter_service_response_;
      }
      break;
    }
    case SERVICE_RESPONSE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = SERVICE_RESPONSE_NOT_SET;
}


PROTOBUF_NOINLINE void DatabaseResponseWrapper::Clear() {
// @@protoc_insertion_point(message_clear_start:DatabaseResponseWrapper)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.session_id_ = 0u;
  clear_service_response();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* DatabaseResponseWrapper::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 3, 2, 0, 2> DatabaseResponseWrapper::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_DatabaseResponseWrapper_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // uint32 session_id = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(DatabaseResponseWrapper, _impl_.session_id_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(DatabaseResponseWrapper, _impl_.session_id_)}},
  }}, {{
    65535, 65535
  }}, {{
    // uint32 session_id = 1;
    {PROTOBUF_FIELD_OFFSET(DatabaseResponseWrapper, _impl_.session_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // .AccountServiceResponseWrapper account_service_response = 2;
    {PROTOBUF_FIELD_OFFSET(DatabaseResponseWrapper, _impl_.service_response_.account_service_response_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .GameCharacterServiceResponseWrapper gamecharacter_service_response = 3;
    {PROTOBUF_FIELD_OFFSET(DatabaseResponseWrapper, _impl_.service_response_.gamecharacter_service_response_), _Internal::kOneofCaseOffset + 0, 1,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::AccountServiceResponseWrapper>()},
    {::_pbi::TcParser::GetTable<::GameCharacterServiceResponseWrapper>()},
  }}, {{
  }},
};

::uint8_t* DatabaseResponseWrapper::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DatabaseResponseWrapper)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // uint32 session_id = 1;
  if (this->_internal_session_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_session_id(), target);
  }

  switch (service_response_case()) {
    case kAccountServiceResponse: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          2, _Internal::account_service_response(this),
          _Internal::account_service_response(this).GetCachedSize(), target, stream);
      break;
    }
    case kGamecharacterServiceResponse: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          3, _Internal::gamecharacter_service_response(this),
          _Internal::gamecharacter_service_response(this).GetCachedSize(), target, stream);
      break;
    }
    default:
      break;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DatabaseResponseWrapper)
  return target;
}

::size_t DatabaseResponseWrapper::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DatabaseResponseWrapper)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 session_id = 1;
  if (this->_internal_session_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_session_id());
  }

  switch (service_response_case()) {
    // .AccountServiceResponseWrapper account_service_response = 2;
    case kAccountServiceResponse: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.service_response_.account_service_response_);
      break;
    }
    // .GameCharacterServiceResponseWrapper gamecharacter_service_response = 3;
    case kGamecharacterServiceResponse: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.service_response_.gamecharacter_service_response_);
      break;
    }
    case SERVICE_RESPONSE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData DatabaseResponseWrapper::_class_data_ = {
    DatabaseResponseWrapper::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* DatabaseResponseWrapper::GetClassData() const {
  return &_class_data_;
}

void DatabaseResponseWrapper::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<DatabaseResponseWrapper*>(&to_msg);
  auto& from = static_cast<const DatabaseResponseWrapper&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:DatabaseResponseWrapper)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_session_id() != 0) {
    _this->_internal_set_session_id(from._internal_session_id());
  }
  switch (from.service_response_case()) {
    case kAccountServiceResponse: {
      _this->_internal_mutable_account_service_response()->::AccountServiceResponseWrapper::MergeFrom(
          from._internal_account_service_response());
      break;
    }
    case kGamecharacterServiceResponse: {
      _this->_internal_mutable_gamecharacter_service_response()->::GameCharacterServiceResponseWrapper::MergeFrom(
          from._internal_gamecharacter_service_response());
      break;
    }
    case SERVICE_RESPONSE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void DatabaseResponseWrapper::CopyFrom(const DatabaseResponseWrapper& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DatabaseResponseWrapper)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool DatabaseResponseWrapper::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* DatabaseResponseWrapper::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void DatabaseResponseWrapper::InternalSwap(DatabaseResponseWrapper* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
        swap(_impl_.session_id_, other->_impl_.session_id_);
  swap(_impl_.service_response_, other->_impl_.service_response_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::google::protobuf::Metadata DatabaseResponseWrapper::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_DatabaseProtocol_2eproto_getter, &descriptor_table_DatabaseProtocol_2eproto_once,
      file_level_metadata_DatabaseProtocol_2eproto[1]);
}
// @@protoc_insertion_point(namespace_scope)
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
